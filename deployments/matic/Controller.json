{
  "address": "0x292D8BACc94B8EF9d640C7449891349d7A14c3A6",
  "abi": [
    {
      "inputs": [],
      "name": "AccountNotInAllowlist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArraysLengthDontMatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_invalidDiscountIndex",
          "type": "uint256"
        }
      ],
      "name": "DiscountCodeAlreadyUsed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_invalidStartTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_invalidEndTime",
          "type": "uint256"
        }
      ],
      "name": "EndTimeBehindStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsSaleSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsTokensPerTransactionLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsTokensPerWalletLimit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_invalidSaleCategoryId",
          "type": "uint256"
        }
      ],
      "name": "InexistentSaleCategory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDiscountCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_invalidPerTransactionLimit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_invalidPerWalletLimit",
          "type": "uint64"
        }
      ],
      "name": "PerTransactionLimitGreaterThanPerWalletLimit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "_inactivePhase",
          "type": "uint8"
        }
      ],
      "name": "PhaseInactive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "_currentPhaseId",
          "type": "uint8"
        }
      ],
      "name": "PhaseIsAlreadyActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SaleNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SaleNotAllowlisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SaleNotDiscounted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SalePaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetTokensToReserveForAllPhases",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_invalidStartTime",
          "type": "uint96"
        }
      ],
      "name": "StartTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "_phaseId",
          "type": "uint8"
        }
      ],
      "name": "TokensAlreadyReservedForPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferExactAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_phase",
          "type": "uint8"
        }
      ],
      "name": "AddedSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldAvatar",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAvatar",
          "type": "address"
        }
      ],
      "name": "AvatarUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_discountCodeIndex",
          "type": "uint256"
        }
      ],
      "name": "DiscountCodeApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        }
      ],
      "name": "DiscountDisabledOnSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        }
      ],
      "name": "DiscountEnabledOnSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newDiscountSigner",
          "type": "address"
        }
      ],
      "name": "DiscountSignerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_newKeyCardRatio",
          "type": "uint64"
        }
      ],
      "name": "KeyCardRatioUpdatedForSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldKeyCard",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newKeyCard",
          "type": "address"
        }
      ],
      "name": "MemberKeyCardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "MerkleRootUpdatedSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        }
      ],
      "name": "PausedSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_newPerTransactionLimit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_newPerWalletLimit",
          "type": "uint64"
        }
      ],
      "name": "PerLimitUpdatedOfSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IController.PHASE_ID",
          "name": "newPhaseId",
          "type": "uint8"
        }
      ],
      "name": "PhaseChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdatedForSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_newSupplyForTheSale",
          "type": "uint64"
        }
      ],
      "name": "SupplyUpdatedForSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_newStartTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_newEndTime",
          "type": "uint96"
        }
      ],
      "name": "TimeUpdatedForSaleCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IController.PHASE_ID",
          "name": "phaseId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "tokensToReserve",
          "type": "uint96"
        }
      ],
      "name": "TokenToReserveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IController.PHASE_ID",
          "name": "phaseId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "numberOfTokensReserved",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "TokensReserved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        }
      ],
      "name": "UnpausedSale",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EMPTY_BYTES",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PHASES",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_startTime",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_endTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_perWalletLimit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_perTransactionLimit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_supply",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_keyCardPerAvatar",
          "type": "uint64"
        },
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "_phase",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_isDiscountEnabled",
          "type": "bool"
        }
      ],
      "name": "addSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_discountIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discountedPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiverAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "checkDiscountCodeValidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "_phaseId",
          "type": "uint8"
        }
      ],
      "name": "checkIfTokenReservedForPhase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_newKeyCardRatio",
          "type": "uint64"
        }
      ],
      "name": "editKeyCardRatioOfSaleCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "editMerkleRootOfSaleCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_newPerWalletLimit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_newPerTransactionLimit",
          "type": "uint64"
        }
      ],
      "name": "editPerLimitOfSaleCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "editPriceOfSaleCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_newStartTime",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_newEndTime",
          "type": "uint96"
        }
      ],
      "name": "editSaleTimeOfSaleCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_newTokensSupply",
          "type": "uint64"
        }
      ],
      "name": "editSupplyOfSaleCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvatar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPhase",
      "outputs": [
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDiscountSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKeyCard",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        }
      ],
      "name": "getSaleCategory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "perWalletLimit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "perTransactionLimit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "supply",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "tokensMinted",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "keyCardPerAvatar",
              "type": "uint64"
            },
            {
              "internalType": "uint96",
              "name": "startTime",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "endTime",
              "type": "uint96"
            },
            {
              "internalType": "enum IController.PHASE_ID",
              "name": "phase",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDiscountEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct IController.SaleCategory",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSaleCategoryCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "_phaseId",
          "type": "uint8"
        }
      ],
      "name": "getTokensToReserveInPhase",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAvatar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newKeyCard",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newDiscountSigner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shares",
          "type": "uint256[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_tokensToReserveInPhase",
          "type": "uint96[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_numberOfTokens",
          "type": "uint96"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proofs",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_saleId",
          "type": "uint256"
        }
      ],
      "name": "mintAllowlisted",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_numberOfTokens",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_saleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discountIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discountedPrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mintDiscounted",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_numberOfTokens",
          "type": "uint96"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proofs",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_saleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discountIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discountedPrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mintDiscountedAllowlist",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_numberOfTokens",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_saleId",
          "type": "uint256"
        }
      ],
      "name": "mintPublic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "releasable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "releasable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "_phaseId",
          "type": "uint8"
        }
      ],
      "name": "reserveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAvatar",
          "type": "address"
        }
      ],
      "name": "setAvatar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDiscountSigner",
          "type": "address"
        }
      ],
      "name": "setDiscountSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newKeyCard",
          "type": "address"
        }
      ],
      "name": "setKeyCard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.PHASE_ID",
          "name": "_newPhase",
          "type": "uint8"
        }
      ],
      "name": "setNewPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IController.PHASE_ID[]",
          "name": "_phaseId",
          "type": "uint8[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_numberOfTokens",
          "type": "uint96[]"
        }
      ],
      "name": "setTokensToReserveInPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isDiscounted",
          "type": "bool"
        }
      ],
      "name": "toggleDiscountOfSaleCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCategoryId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isPaused",
          "type": "bool"
        }
      ],
      "name": "togglePauseSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "tokensMintedByOwnerInSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "b5604cc99e6b345d88f963b18ac06020",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountNotInAllowlist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraysLengthDontMatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_invalidDiscountIndex\",\"type\":\"uint256\"}],\"name\":\"DiscountCodeAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_invalidStartTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_invalidEndTime\",\"type\":\"uint256\"}],\"name\":\"EndTimeBehindStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsSaleSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsTokensPerTransactionLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsTokensPerWalletLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_invalidSaleCategoryId\",\"type\":\"uint256\"}],\"name\":\"InexistentSaleCategory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDiscountCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_invalidPerTransactionLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_invalidPerWalletLimit\",\"type\":\"uint64\"}],\"name\":\"PerTransactionLimitGreaterThanPerWalletLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"_inactivePhase\",\"type\":\"uint8\"}],\"name\":\"PhaseInactive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"_currentPhaseId\",\"type\":\"uint8\"}],\"name\":\"PhaseIsAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotAllowlisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotDiscounted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SalePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetTokensToReserveForAllPhases\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_invalidStartTime\",\"type\":\"uint96\"}],\"name\":\"StartTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"_phaseId\",\"type\":\"uint8\"}],\"name\":\"TokensAlreadyReservedForPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferExactAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"AddedSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAvatar\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAvatar\",\"type\":\"address\"}],\"name\":\"AvatarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_discountCodeIndex\",\"type\":\"uint256\"}],\"name\":\"DiscountCodeApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"}],\"name\":\"DiscountDisabledOnSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"}],\"name\":\"DiscountEnabledOnSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDiscountSigner\",\"type\":\"address\"}],\"name\":\"DiscountSignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newKeyCardRatio\",\"type\":\"uint64\"}],\"name\":\"KeyCardRatioUpdatedForSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldKeyCard\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newKeyCard\",\"type\":\"address\"}],\"name\":\"MemberKeyCardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootUpdatedSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"}],\"name\":\"PausedSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newPerTransactionLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newPerWalletLimit\",\"type\":\"uint64\"}],\"name\":\"PerLimitUpdatedOfSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"newPhaseId\",\"type\":\"uint8\"}],\"name\":\"PhaseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdatedForSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newSupplyForTheSale\",\"type\":\"uint64\"}],\"name\":\"SupplyUpdatedForSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_newStartTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_newEndTime\",\"type\":\"uint96\"}],\"name\":\"TimeUpdatedForSaleCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"phaseId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"tokensToReserve\",\"type\":\"uint96\"}],\"name\":\"TokenToReserveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"phaseId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"numberOfTokensReserved\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TokensReserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"}],\"name\":\"UnpausedSale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMPTY_BYTES\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PHASES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_startTime\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_endTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_perWalletLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_perTransactionLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_keyCardPerAvatar\",\"type\":\"uint64\"},{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"_phase\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isDiscountEnabled\",\"type\":\"bool\"}],\"name\":\"addSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkDiscountCodeValidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"_phaseId\",\"type\":\"uint8\"}],\"name\":\"checkIfTokenReservedForPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_newKeyCardRatio\",\"type\":\"uint64\"}],\"name\":\"editKeyCardRatioOfSaleCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"editMerkleRootOfSaleCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_newPerWalletLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newPerTransactionLimit\",\"type\":\"uint64\"}],\"name\":\"editPerLimitOfSaleCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"editPriceOfSaleCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_newStartTime\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_newEndTime\",\"type\":\"uint96\"}],\"name\":\"editSaleTimeOfSaleCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_newTokensSupply\",\"type\":\"uint64\"}],\"name\":\"editSupplyOfSaleCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvatar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPhase\",\"outputs\":[{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscountSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeyCard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"}],\"name\":\"getSaleCategory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"perWalletLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"perTransactionLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tokensMinted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"keyCardPerAvatar\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"startTime\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDiscountEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct IController.SaleCategory\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleCategoryCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"_phaseId\",\"type\":\"uint8\"}],\"name\":\"getTokensToReserveInPhase\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAvatar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newKeyCard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newDiscountSigner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_tokensToReserveInPhase\",\"type\":\"uint96[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_numberOfTokens\",\"type\":\"uint96\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"mintAllowlisted\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_numberOfTokens\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountedPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintDiscounted\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_numberOfTokens\",\"type\":\"uint96\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountedPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintDiscountedAllowlist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_numberOfTokens\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"_phaseId\",\"type\":\"uint8\"}],\"name\":\"reserveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAvatar\",\"type\":\"address\"}],\"name\":\"setAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDiscountSigner\",\"type\":\"address\"}],\"name\":\"setDiscountSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newKeyCard\",\"type\":\"address\"}],\"name\":\"setKeyCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IController.PHASE_ID\",\"name\":\"_newPhase\",\"type\":\"uint8\"}],\"name\":\"setNewPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IController.PHASE_ID[]\",\"name\":\"_phaseId\",\"type\":\"uint8[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_numberOfTokens\",\"type\":\"uint96[]\"}],\"name\":\"setTokensToReserveInPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDiscounted\",\"type\":\"bool\"}],\"name\":\"toggleDiscountOfSaleCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCategoryId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"togglePauseSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"tokensMintedByOwnerInSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Mihirsinh Parmar <mihirsinh@chainlabs.in>\",\"details\":\"Controller owns the NFT contract from where it mints NFTs\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addSale(uint96,uint96,uint256,bytes32,uint64,uint64,uint64,uint64,uint8,bool)\":{\"details\":\"add new sale category\",\"params\":{\"_endTime\":\"end time of sale\",\"_isDiscountEnabled\":\"is discount enabled on this sale\",\"_keyCardPerAvatar\":\"number of Key Card to be given per avatar minted\",\"_merkleRoot\":\"merkle root of sale\",\"_perTransactionLimit\":\"allowed NFT limit per transaction\",\"_perWalletLimit\":\"allowed NFT limit per wallet\",\"_phase\":\"which phase does this sale category belongs to\",\"_price\":\"price per NFT of the sale\",\"_startTime\":\"start time of sale\",\"_supply\":\"supply of NFTs allowed to be sold in this sale category\"}},\"editKeyCardRatioOfSaleCategory(uint256,uint64)\":{\"details\":\"edit key card ratio of sale category\",\"params\":{\"_newKeyCardRatio\":\"new key card ratio\",\"_saleCategoryId\":\"sale category id\"}},\"editMerkleRootOfSaleCategory(uint256,bytes32)\":{\"details\":\"edit new merkle root of sale category\",\"params\":{\"_newMerkleRoot\":\"new merkle root of sale category id\",\"_saleCategoryId\":\"sale category id\"}},\"editPerLimitOfSaleCategory(uint256,uint64,uint64)\":{\"details\":\"edit limits for wallet or transaction\",\"params\":{\"_newPerTransactionLimit\":\"new limit per transaction\",\"_newPerWalletLimit\":\"new limit per wallet\",\"_saleCategoryId\":\"sale category id\"}},\"editPriceOfSaleCategory(uint256,uint256)\":{\"details\":\"edit new price of sale category\",\"params\":{\"_newPrice\":\"new price for this sale category\",\"_saleCategoryId\":\"sale category id\"}},\"editSaleTimeOfSaleCategory(uint256,uint96,uint96)\":{\"details\":\"edit new sale time of sale category\",\"params\":{\"_newEndTime\":\"new end time of sale category\",\"_newStartTime\":\"new start time of sale category\",\"_saleCategoryId\":\"sale category id\"}},\"editSupplyOfSaleCategory(uint256,uint64)\":{\"details\":\"edit new supply of sale category\",\"params\":{\"_newTokensSupply\":\"new supply of sale category\",\"_saleCategoryId\":\"sale category id\"}},\"getAvatar()\":{\"details\":\"getter for avatar NFT instance\",\"returns\":{\"_0\":\"avatar NFT instance\"}},\"getDiscountSigner()\":{\"details\":\"get discount signer address\",\"returns\":{\"_0\":\"discountSigner the address of signer who signs discount codes\"}},\"getKeyCard()\":{\"details\":\"getter for key card NFT instance\",\"returns\":{\"_0\":\"key card NFT instance\"}},\"getSaleCategory(uint256)\":{\"details\":\"get sale category\",\"params\":{\"_saleCategoryId\":\"sale category id\"},\"returns\":{\"_0\":\"returns sale category struct\"}},\"getSaleCategoryCounter()\":{\"details\":\"get number of sale categories that have been added\",\"returns\":{\"counter\":\"number of sale category that have been added\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause public functions\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"releasable(address)\":{\"details\":\"Getter for the amount of payee's releasable Ether.\"},\"releasable(address,address)\":{\"details\":\"Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDiscountSigner(address)\":{\"details\":\"set new discount signer\",\"params\":{\"_newDiscountSigner\":\"new discount signer\"}},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"toggleDiscountOfSaleCategory(uint256,bool)\":{\"details\":\"toggle discount for a sale category\",\"params\":{\"_isDiscounted\":\"is discount to be enabled\",\"_saleCategoryId\":\"sale category id\"}},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause public functions\"}},\"title\":\"Controller\",\"version\":1},\"userdoc\":{\"events\":{\"AddedSaleCategory(uint256,uint8)\":{\"notice\":\"logs when new sale category is added\"},\"AvatarUpdated(address,address)\":{\"notice\":\"logs when new avatar is updated\"},\"DiscountCodeApplied(uint256)\":{\"notice\":\"logs when discount code index is applied\"},\"DiscountDisabledOnSaleCategory(uint256)\":{\"notice\":\"logs when discount is disabled for sale category\"},\"DiscountEnabledOnSaleCategory(uint256)\":{\"notice\":\"logs when discount is enabled for sale category\"},\"DiscountSignerUpdated(address)\":{\"notice\":\"logs when discount signer is updated\"},\"KeyCardRatioUpdatedForSaleCategory(uint256,uint64)\":{\"notice\":\"logs when key card : avatar NFT ratio is updated for a sale category\"},\"MemberKeyCardUpdated(address,address)\":{\"notice\":\"logs when new member key card is updated\"},\"MerkleRootUpdatedSaleCategory(uint256,bytes32)\":{\"notice\":\"logs when merkle root is updated for sale category\"},\"PerLimitUpdatedOfSaleCategory(uint256,uint64,uint64)\":{\"notice\":\"logs when limit per wallet and transaction is updated for sale category\"},\"PriceUpdatedForSaleCategory(uint256,uint256)\":{\"notice\":\"logs when new price is set for sale category\"},\"SupplyUpdatedForSaleCategory(uint256,uint64)\":{\"notice\":\"logs when supply of sale category is updated\"},\"TimeUpdatedForSaleCategory(uint256,uint96,uint96)\":{\"notice\":\"logs when start time and end time is updated for a sale category\"}},\"kind\":\"user\",\"methods\":{\"addSale(uint96,uint96,uint256,bytes32,uint64,uint64,uint64,uint64,uint8,bool)\":{\"notice\":\"add new sale category\"},\"editKeyCardRatioOfSaleCategory(uint256,uint64)\":{\"notice\":\"edit key card ratio of sale category\"},\"editMerkleRootOfSaleCategory(uint256,bytes32)\":{\"notice\":\"edit new merkle root of sale category\"},\"editPerLimitOfSaleCategory(uint256,uint64,uint64)\":{\"notice\":\"edit limits of sale category\"},\"editPriceOfSaleCategory(uint256,uint256)\":{\"notice\":\"edit new price of sale category\"},\"editSaleTimeOfSaleCategory(uint256,uint96,uint96)\":{\"notice\":\"edit new sale time of sale category\"},\"editSupplyOfSaleCategory(uint256,uint64)\":{\"notice\":\"edit new supply of sale category\"},\"getAvatar()\":{\"notice\":\"get avatar NFT contract instance\"},\"getDiscountSigner()\":{\"notice\":\"get discount signer address\"},\"getKeyCard()\":{\"notice\":\"get key card NFT contract instance\"},\"getSaleCategory(uint256)\":{\"notice\":\"get sale category\"},\"getSaleCategoryCounter()\":{\"notice\":\"get number of sale categories that have been added\"},\"pause()\":{\"notice\":\"pause public functions\"},\"setDiscountSigner(address)\":{\"notice\":\"set new discount signer\"},\"toggleDiscountOfSaleCategory(uint256,bool)\":{\"notice\":\"toggle discount for a sale category\"},\"unpause()\":{\"notice\":\"unpause public functions\"}},\"notice\":\"This contract handles logic of the various NFT sales.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x02417a789e1dab24162ce37ce6852f4d497f9332edbe5ae98646cf89bd506509\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Avatar/IAvatar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IAvatar {\\n    function mint(address _receiver, uint256 _quantity) external;\\n}\\n\",\"keccak256\":\"0x03df5874d2f1bacc3a4650a40fead62ecd99eaa9fc4df56adb1f4fd13f07e154\",\"license\":\"MIT\"},\"contracts/Controller/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ControllerInternal} from \\\"./ControllerInternal.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {PaymentSplitterUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\n\\n/// @title Controller\\n/// @author Mihirsinh Parmar <mihirsinh@chainlabs.in>\\n/// @notice This contract handles logic of the various NFT sales.\\n/// @dev Controller owns the NFT contract from where it mints NFTs\\ncontract Controller is\\n    PausableUpgradeable,\\n    Ownable2StepUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PaymentSplitterUpgradeable,\\n    ControllerInternal\\n{\\n    error SetTokensToReserveForAllPhases();\\n\\n    string public constant NAME = \\\"Panchabhoot Controller\\\";\\n    string public constant VERSION = \\\"0.1.0\\\";\\n    bytes public constant EMPTY_BYTES = bytes(\\\"\\\");\\n    uint8 public constant MAX_PHASES = 3;\\n\\n    function initialize(\\n        address _newAvatar,\\n        address _newKeyCard,\\n        address _newDiscountSigner,\\n        address[] memory _payees,\\n        uint256[] memory _shares,\\n        uint96[] memory _tokensToReserveInPhase\\n    ) external initializer {\\n        // check if _tokensToReserveInPhaseLength is 3\\n        if (_tokensToReserveInPhase.length != MAX_PHASES) {\\n            revert SetTokensToReserveForAllPhases();\\n        }\\n\\n        __Pausable_init();\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n        __PaymentSplitter_init(_payees, _shares);\\n        _setAvatar(_newAvatar);\\n        _setKeyCard(_newKeyCard);\\n        _setDiscountSigner(_newDiscountSigner);\\n        for (uint256 i; i < _tokensToReserveInPhase.length; i++) {\\n            _setTokenToReserveOfPhase(PHASE_ID(i), _tokensToReserveInPhase[i]);\\n        }\\n    }\\n\\n    function setAvatar(address _newAvatar) external virtual override onlyOwner {\\n        _setAvatar(_newAvatar);\\n    }\\n\\n    function setKeyCard(\\n        address _newKeyCard\\n    ) external virtual override onlyOwner {\\n        _setKeyCard(_newKeyCard);\\n    }\\n\\n    /// @notice add new sale category\\n    /// @dev add new sale category\\n    /// @param _startTime start time of sale\\n    /// @param _endTime end time of sale\\n    /// @param _price price per NFT of the sale\\n    /// @param _merkleRoot merkle root of sale\\n    /// @param _perWalletLimit allowed NFT limit per wallet\\n    /// @param _perTransactionLimit allowed NFT limit per transaction\\n    /// @param _supply supply of NFTs allowed to be sold in this sale category\\n    /// @param _keyCardPerAvatar number of Key Card to be given per avatar minted\\n    /// @param _phase which phase does this sale category belongs to\\n    /// @param _isDiscountEnabled is discount enabled on this sale\\n    function addSale(\\n        uint96 _startTime,\\n        uint96 _endTime,\\n        uint256 _price,\\n        bytes32 _merkleRoot,\\n        uint64 _perWalletLimit,\\n        uint64 _perTransactionLimit,\\n        uint64 _supply,\\n        uint64 _keyCardPerAvatar,\\n        PHASE_ID _phase,\\n        bool _isDiscountEnabled\\n    ) external virtual override onlyOwner {\\n        _addSaleCategory(\\n            _startTime,\\n            _endTime,\\n            _price,\\n            _merkleRoot,\\n            _perWalletLimit,\\n            _perTransactionLimit,\\n            _supply,\\n            _keyCardPerAvatar,\\n            _phase,\\n            _isDiscountEnabled\\n        );\\n    }\\n\\n    /// @notice edit new sale time of sale category\\n    /// @dev edit new sale time of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newStartTime new start time of sale category\\n    /// @param _newEndTime new end time of sale category\\n    function editSaleTimeOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint96 _newStartTime,\\n        uint96 _newEndTime\\n    ) external onlyOwner {\\n        // set sale start time of sale category\\n        _setSaleTimeOfSaleCategory(_saleCategoryId, _newStartTime, _newEndTime);\\n    }\\n\\n    /// @notice edit new price of sale category\\n    /// @dev edit new price of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newPrice new price for this sale category\\n    function editPriceOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint256 _newPrice\\n    ) external onlyOwner {\\n        // set price of sale category\\n        _setPriceOfSaleCategory(_saleCategoryId, _newPrice);\\n    }\\n\\n    /// @notice edit new merkle root of sale category\\n    /// @dev edit new merkle root of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newMerkleRoot new merkle root of sale category id\\n    function editMerkleRootOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        bytes32 _newMerkleRoot\\n    ) external onlyOwner {\\n        // set merkle root of sale category\\n        _setMerkleRootOfSaleCategory(_saleCategoryId, _newMerkleRoot);\\n    }\\n\\n    /// @notice edit limits of sale category\\n    /// @dev edit limits for wallet or transaction\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newPerWalletLimit new limit per wallet\\n    /// @param _newPerTransactionLimit new limit per transaction\\n    function editPerLimitOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newPerWalletLimit,\\n        uint64 _newPerTransactionLimit\\n    ) external onlyOwner {\\n        // set limit per wallet and limit per transaction\\n        _setPerLimitOfSaleCategory(\\n            _saleCategoryId,\\n            _newPerWalletLimit,\\n            _newPerTransactionLimit\\n        );\\n    }\\n\\n    /// @notice edit new supply of sale category\\n    /// @dev edit new supply of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newTokensSupply new supply of sale category\\n    function editSupplyOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newTokensSupply\\n    ) external onlyOwner {\\n        // set supply of sale category\\n        _setSupplyOfSaleCategory(_saleCategoryId, _newTokensSupply);\\n    }\\n\\n    /// @notice edit key card ratio of sale category\\n    /// @dev edit key card ratio of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newKeyCardRatio new key card ratio\\n    function editKeyCardRatioOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newKeyCardRatio\\n    ) external onlyOwner {\\n        // set key card ratio\\n        _setKeyCardRatioOfSaleCategory(_saleCategoryId, _newKeyCardRatio);\\n    }\\n\\n    /// @notice toggle discount for a sale category\\n    /// @dev toggle discount for a sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _isDiscounted is discount to be enabled\\n    function toggleDiscountOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        bool _isDiscounted\\n    ) external onlyOwner {\\n        if (_isDiscounted) {\\n            // enable discount on sale category\\n            _setSaleDicountedTrue(_saleCategoryId);\\n        } else {\\n            // disable discount on sale category\\n            _setSaleDiscountedFalse(_saleCategoryId);\\n        }\\n    }\\n\\n    function togglePauseSale(\\n        uint256 _saleCategoryId,\\n        bool _isPaused\\n    ) external onlyOwner {\\n        if (_isPaused) {\\n            _pauseSale(_saleCategoryId);\\n        } else {\\n            _unpauseSale(_saleCategoryId);\\n        }\\n    }\\n\\n    /// @notice set new discount signer\\n    /// @dev set new discount signer\\n    /// @param _newDiscountSigner new discount signer\\n    function setDiscountSigner(address _newDiscountSigner) external onlyOwner {\\n        _setDiscountSigner(_newDiscountSigner);\\n    }\\n\\n    /// @notice get sale category\\n    /// @dev get sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @return returns sale category struct\\n    function getSaleCategory(\\n        uint256 _saleCategoryId\\n    ) external view virtual override returns (SaleCategory memory) {\\n        return _getSaleCategory(_saleCategoryId);\\n    }\\n\\n    /// @notice get avatar NFT contract instance\\n    /// @dev getter for avatar NFT instance\\n    /// @return avatar NFT instance\\n    function getAvatar() external view virtual override returns (address) {\\n        return _getAvatar();\\n    }\\n\\n    /// @notice get key card NFT contract instance\\n    /// @dev getter for key card NFT instance\\n    /// @return key card NFT instance\\n    function getKeyCard() external view virtual override returns (address) {\\n        return _getKeyCard();\\n    }\\n\\n    function checkDiscountCodeValidity(\\n        uint256 _discountIndex,\\n        uint256 _discountedPrice,\\n        address _receiverAddress,\\n        bytes memory _signature\\n    ) external view virtual override returns (bool) {\\n        return\\n            _checkValidDiscountCode(\\n                _discountIndex,\\n                _discountedPrice,\\n                _receiverAddress,\\n                _signature\\n            );\\n    }\\n\\n    /// @notice pause public functions\\n    /// @dev pause public functions\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice unpause public functions\\n    /// @dev unpause public functions\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice get number of sale categories that have been added\\n    /// @dev get number of sale categories that have been added\\n    /// @return counter number of sale category that have been added\\n    function getSaleCategoryCounter()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256 counter)\\n    {\\n        return _getSaleCategoryCounter();\\n    }\\n\\n    /// @notice get discount signer address\\n    /// @dev get discount signer address\\n    /// @return discountSigner the address of signer who signs discount codes\\n    function getDiscountSigner() external view returns (address) {\\n        return _getDiscountSigner();\\n    }\\n\\n    function setNewPhase(PHASE_ID _newPhase) external onlyOwner {\\n        _setNewPhase(_newPhase);\\n    }\\n\\n    function getCurrentPhase() external view returns (PHASE_ID) {\\n        return _getCurrentPhase();\\n    }\\n\\n    function getTokensToReserveInPhase(\\n        PHASE_ID _phaseId\\n    ) external view returns (uint96) {\\n        return _getTokensToReserveInPhase(_phaseId);\\n    }\\n\\n    function checkIfTokenReservedForPhase(\\n        PHASE_ID _phaseId\\n    ) external view returns (bool) {\\n        return _checkIfTokenReservedForPhase(_phaseId);\\n    }\\n\\n    function setTokensToReserveInPhase(\\n        PHASE_ID[] memory _phaseId,\\n        uint96[] memory _numberOfTokens\\n    ) external onlyOwner {\\n        // check if both arrays have same length\\n        _requireSameArrayLength(_phaseId, _numberOfTokens);\\n\\n        // set tokens to reserve\\n        for (uint256 i; i < _phaseId.length; i++) {\\n            _setTokenToReserveOfPhase(_phaseId[i], _numberOfTokens[i]);\\n        }\\n    }\\n\\n    function reserveTokens(PHASE_ID _phaseId) external onlyOwner {\\n        _reserveTokens(_phaseId);\\n    }\\n\\n    function tokensMintedByOwnerInSale(\\n        uint256 _saleId,\\n        address _receiver\\n    ) external view returns (uint256) {\\n        // todo: convert it to internal function\\n        return _tokensMintedByUser[_saleId][_receiver];\\n    }\\n\\n    function mintDiscountedAllowlist(\\n        address _receiver,\\n        uint96 _numberOfTokens,\\n        bytes32[] calldata _proofs,\\n        uint256 _saleId,\\n        uint256 _discountIndex,\\n        uint256 _discountedPrice,\\n        bytes memory _signature\\n    ) external payable {\\n        // get sale category\\n        SaleCategory memory _sale = _getSaleCategory(_saleId);\\n        // mint allow listed with discount\\n        _mintAllowlisted(\\n            _sale,\\n            _receiver,\\n            _numberOfTokens,\\n            _proofs,\\n            _saleId,\\n            _discountIndex,\\n            _discountedPrice,\\n            _signature,\\n            true\\n        );\\n    }\\n\\n    function mintAllowlisted(\\n        address _receiver,\\n        uint96 _numberOfTokens,\\n        bytes32[] calldata _proofs,\\n        uint256 _saleId\\n    ) external payable {\\n        // get sale category\\n        SaleCategory memory _sale = _getSaleCategory(_saleId);\\n        // mint allow listed without discount\\n        _mintAllowlisted(\\n            _sale,\\n            _receiver,\\n            _numberOfTokens,\\n            _proofs,\\n            _saleId,\\n            0,\\n            0,\\n            EMPTY_BYTES,\\n            false\\n        );\\n    }\\n\\n    function mintDiscounted(\\n        address _receiver,\\n        uint96 _numberOfTokens,\\n        uint256 _saleId,\\n        uint256 _discountIndex,\\n        uint256 _discountedPrice,\\n        bytes memory _signature\\n    ) external payable {\\n        // get sale category\\n        SaleCategory memory _sale = _getSaleCategory(_saleId);\\n        // mint with discount\\n        _mintTokens(\\n            _sale,\\n            _receiver,\\n            _numberOfTokens,\\n            _saleId,\\n            _discountIndex,\\n            _discountedPrice,\\n            _signature,\\n            true\\n        );\\n    }\\n\\n    function mintPublic(\\n        address _receiver,\\n        uint96 _numberOfTokens,\\n        uint256 _saleId\\n    ) external payable {\\n        // get sale category\\n        SaleCategory memory _sale = _getSaleCategory(_saleId);\\n        // mint with discount\\n        _mintTokens(\\n            _sale,\\n            _receiver,\\n            _numberOfTokens,\\n            _saleId,\\n            0,\\n            0,\\n            EMPTY_BYTES,\\n            false\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfe653a2a50e67abe76e3421e341d87a7f3b201f35f6340d2f680861bacdcabba\",\"license\":\"MIT\"},\"contracts/Controller/ControllerInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {ControllerStorage} from \\\"./ControllerStorage.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {SignatureChecker, ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IKeyCard} from \\\"../KeyCard/IKeyCard.sol\\\";\\nimport {IAvatar} from \\\"../Avatar/IAvatar.sol\\\";\\n\\nabstract contract ControllerInternal is ControllerStorage {\\n    using Counters for Counters.Counter;\\n    using ECDSA for bytes32;\\n\\n    // Errors\\n    error EndTimeBehindStartTime(\\n        uint96 _invalidStartTime,\\n        uint256 _invalidEndTime\\n    );\\n    error PerTransactionLimitGreaterThanPerWalletLimit(\\n        uint64 _invalidPerTransactionLimit,\\n        uint64 _invalidPerWalletLimit\\n    );\\n    error StartTimeInPast(uint96 _invalidStartTime);\\n    error InexistentSaleCategory(uint256 _invalidSaleCategoryId);\\n    error DiscountCodeAlreadyUsed(uint256 _invalidDiscountIndex);\\n    error InvalidDiscountCode();\\n    error TokensAlreadyReservedForPhase(PHASE_ID _phaseId);\\n    error PhaseIsAlreadyActive(PHASE_ID _currentPhaseId);\\n    error ArraysLengthDontMatch();\\n    error PhaseInactive(PHASE_ID _inactivePhase);\\n    error SalePaused();\\n    error ExceedsTokensPerTransactionLimit();\\n    error ExceedsTokensPerWalletLimit();\\n    error ExceedsSaleSupply();\\n    error SaleNotActive();\\n    error SaleNotDiscounted();\\n    error SaleNotAllowlisted();\\n    error AccountNotInAllowlist();\\n    error TransferExactAmount();\\n\\n    /// @notice set avatar instance address\\n    /// @dev setter for avatar address\\n    /// @param _newAvatar new avatar instance\\n    function _setAvatar(address _newAvatar) internal {\\n        address _oldAvatar = _avatar;\\n        _avatar = _newAvatar;\\n        emit AvatarUpdated(_oldAvatar, _newAvatar);\\n    }\\n\\n    /// @notice set key card instance address\\n    /// @dev setter for key card address\\n    /// @param _newKeyCard new key card instance\\n    function _setKeyCard(address _newKeyCard) internal {\\n        address _oldKeyCard = _keyCard;\\n        _keyCard = _newKeyCard;\\n        emit MemberKeyCardUpdated(_oldKeyCard, _newKeyCard);\\n    }\\n\\n    /// @notice add new sale category\\n    /// @dev add new sale category\\n    /// @param _startTime start time of sale\\n    /// @param _endTime end time of sale\\n    /// @param _price price per NFT of the sale\\n    /// @param _merkleRoot merkle root of sale\\n    /// @param _perWalletLimit allowed NFT limit per wallet\\n    /// @param _perTransactionLimit allowed NFT limit per transaction\\n    /// @param _supply supply of NFTs allowed to be sold in this sale category\\n    /// @param _keyCardPerAvatar number of Key Card to be given per avatar minted\\n    /// @param _phase which phase does this sale category belongs to\\n    /// @param _isDiscountEnabled is discount enabled on this sale\\n    function _addSaleCategory(\\n        uint96 _startTime,\\n        uint96 _endTime,\\n        uint256 _price,\\n        bytes32 _merkleRoot,\\n        uint64 _perWalletLimit,\\n        uint64 _perTransactionLimit,\\n        uint64 _supply,\\n        uint64 _keyCardPerAvatar,\\n        PHASE_ID _phase,\\n        bool _isDiscountEnabled\\n    ) internal {\\n        // checks\\n        _requireValidTimePeriod(_startTime, _endTime);\\n        _requireValidLimits(_perWalletLimit, _perTransactionLimit);\\n\\n        // increment sale counter\\n        // incrementing in the beginning\\n        // to prevent any unknown issue caused by default value of uint256\\n        _saleCounter.increment();\\n        // get sale category id\\n        uint256 saleCategoryId = _saleCounter.current();\\n\\n        // create sale category struct\\n        SaleCategory memory saleCategory = SaleCategory({\\n            startTime: _startTime,\\n            endTime: _endTime,\\n            price: _price,\\n            merkleRoot: _merkleRoot,\\n            perWalletLimit: _perWalletLimit,\\n            perTransactionLimit: _perTransactionLimit,\\n            supply: _supply,\\n            tokensMinted: 0,\\n            keyCardPerAvatar: _keyCardPerAvatar,\\n            phase: _phase,\\n            paused: false, // by defaut a sale is not paused\\n            isDiscountEnabled: _isDiscountEnabled\\n        });\\n\\n        // add sale to mapping\\n        _saleCategories[saleCategoryId] = saleCategory;\\n\\n        // emit event for new sale category\\n        emit AddedSaleCategory(saleCategoryId, uint8(_phase));\\n    }\\n\\n    /// @notice set new sale time of sale category\\n    /// @dev set new sale time of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newStartTime new start time of sale category\\n    /// @param _newEndTime new end time of sale category\\n    function _setSaleTimeOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint96 _newStartTime,\\n        uint96 _newEndTime\\n    ) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n        _requireValidTimePeriod(_newStartTime, _newEndTime);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // set new start time and end time\\n        _saleCategory.startTime = _newStartTime;\\n        _saleCategory.endTime = _newEndTime;\\n\\n        // set sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit TimeUpdatedForSaleCategory(\\n            _saleCategoryId,\\n            _newStartTime,\\n            _newEndTime\\n        );\\n    }\\n\\n    /// @notice set new price of sale category\\n    /// @dev set new price of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newPrice new price for this sale category\\n    function _setPriceOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint256 _newPrice\\n    ) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // set price\\n        _saleCategory.price = _newPrice;\\n\\n        // set sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit PriceUpdatedForSaleCategory(_saleCategoryId, _newPrice);\\n    }\\n\\n    /// @notice set new merkle root of sale category\\n    /// @dev set new merkle root of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newMerkleRoot new merkle root of sale category id\\n    function _setMerkleRootOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        bytes32 _newMerkleRoot\\n    ) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // set merkle root\\n        _saleCategory.merkleRoot = _newMerkleRoot;\\n\\n        // set updated sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit MerkleRootUpdatedSaleCategory(_saleCategoryId, _newMerkleRoot);\\n    }\\n\\n    /// @notice set limits of sale category\\n    /// @dev set limits for wallet or transaction\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newPerWalletLimit new limit per wallet\\n    /// @param _newPerTransactionLimit new limit per transaction\\n    function _setPerLimitOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newPerWalletLimit,\\n        uint64 _newPerTransactionLimit\\n    ) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n        _requireValidLimits(_newPerWalletLimit, _newPerTransactionLimit);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // set per limits\\n        _saleCategory.perTransactionLimit = _newPerTransactionLimit;\\n        _saleCategory.perWalletLimit = _newPerWalletLimit;\\n\\n        // set sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit PerLimitUpdatedOfSaleCategory(\\n            _saleCategoryId,\\n            _newPerTransactionLimit,\\n            _newPerWalletLimit\\n        );\\n    }\\n\\n    /// @notice set new supply of sale category\\n    /// @dev set new supply of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newTokensSupply new supply of sale category\\n    function _setSupplyOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newTokensSupply\\n    ) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // set supply of sale category\\n        _saleCategory.supply = _newTokensSupply;\\n\\n        // set sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit SupplyUpdatedForSaleCategory(_saleCategoryId, _newTokensSupply);\\n    }\\n\\n    /// @notice set key card ratio of sale category\\n    /// @dev set key card ratio of sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @param _newKeyCardRatio new key card ratio\\n    function _setKeyCardRatioOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newKeyCardRatio\\n    ) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // set key card ratio of sale category\\n        _saleCategory.keyCardPerAvatar = _newKeyCardRatio;\\n\\n        // set updated sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit KeyCardRatioUpdatedForSaleCategory(\\n            _saleCategoryId,\\n            _newKeyCardRatio\\n        );\\n    }\\n\\n    /// @notice enable discount for a sale category\\n    /// @dev enables discount for a sale category\\n    /// @param _saleCategoryId sale category id\\n    function _setSaleDicountedTrue(uint256 _saleCategoryId) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // set sale discount to true\\n        _saleCategory.isDiscountEnabled = true;\\n\\n        // set updated sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit DiscountEnabledOnSaleCategory(_saleCategoryId);\\n    }\\n\\n    /// @notice disable discount for a sale category\\n    /// @dev disables discount for a sale category\\n    /// @param _saleCategoryId sale category id\\n    function _setSaleDiscountedFalse(uint256 _saleCategoryId) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // set sale discount to false\\n        _saleCategory.isDiscountEnabled = false;\\n\\n        // set updated sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit DiscountDisabledOnSaleCategory(_saleCategoryId);\\n    }\\n\\n    function _incrementTokensMintedInSale(\\n        SaleCategory memory _saleCategory,\\n        uint256 _saleCategoryId,\\n        uint96 _numberOfTokensMinted\\n    ) internal {\\n        _saleCategory.tokensMinted += uint64(_numberOfTokensMinted);\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n    }\\n\\n    function _pauseSale(uint256 _saleCategoryId) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // pause sale\\n        _saleCategory.paused = true;\\n        // set updated sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit PausedSale(_saleCategoryId);\\n    }\\n\\n    function _unpauseSale(uint256 _saleCategoryId) internal {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n\\n        // get sale category\\n        SaleCategory memory _saleCategory = _getSaleCategory(_saleCategoryId);\\n\\n        // pause sale\\n        _saleCategory.paused = false;\\n        // set updated sale category\\n        _saleCategories[_saleCategoryId] = _saleCategory;\\n        emit UnpausedSale(_saleCategoryId);\\n    }\\n\\n    function _mintAllowlisted(\\n        SaleCategory memory _sale,\\n        address _receiver,\\n        uint96 _numberOfTokens,\\n        bytes32[] calldata _proofs,\\n        uint256 _saleId,\\n        uint256 _discountIndex,\\n        uint256 _discountedPrice,\\n        bytes memory _signature,\\n        bool _isDiscounted\\n    ) internal {\\n        // check sale is allowlisted\\n        _requireSaleToBeAllowlisted(_sale);\\n        // check valid allowlist\\n        _requireValidAllowlist(_proofs, _receiver, _sale.merkleRoot);\\n\\n        // mint tokens\\n        _mintTokens(\\n            _sale,\\n            _receiver,\\n            _numberOfTokens,\\n            _saleId,\\n            _discountIndex,\\n            _discountedPrice,\\n            _signature,\\n            _isDiscounted\\n        );\\n    }\\n\\n    function _mintTokens(\\n        SaleCategory memory _sale,\\n        address _receiver,\\n        uint96 _numberOfTokens,\\n        uint256 _saleId,\\n        uint256 _discountIndex,\\n        uint256 _discountedPrice,\\n        bytes memory _signature,\\n        bool _isDiscounted\\n    ) internal {\\n        // check if the phase is active or not\\n        _requirePhaseToBeActive(_sale.phase);\\n        // check if sale is paused\\n        _requireSaleNotPaused(_sale);\\n        // check necessary sale conditions\\n        _requireSaleValid(_receiver, _numberOfTokens, _saleId, _sale);\\n\\n        // update tokens minted by user in a sale\\n        _tokensMintedByUser[_saleId][_receiver] += _numberOfTokens;\\n\\n        // updated total tokens minted in a sale\\n        _incrementTokensMintedInSale(_sale, _saleId, _numberOfTokens);\\n\\n        // check discount is valid\\n        if (_isDiscounted) {\\n            // check sale to be discounted\\n            _requireSaleIsDiscounted(_sale);\\n            // validate discount code\\n            _checkValidDiscountCode(\\n                _discountIndex,\\n                _discountedPrice,\\n                _receiver,\\n                _signature\\n            );\\n            // apply discount\\n            _setDiscountCodeApplied(_discountIndex);\\n            // check price\\n            if (msg.value != _numberOfTokens * _discountedPrice) {\\n                // revert with exact amount not transferred\\n                revert TransferExactAmount();\\n            }\\n        } else {\\n            if (msg.value != _numberOfTokens * _sale.price) {\\n                // revert with exact amount not transferred\\n                revert TransferExactAmount();\\n            }\\n        }\\n\\n        uint256 _keyCardToBeMinted = _sale.keyCardPerAvatar * _numberOfTokens;\\n\\n        // mint tokens from avatar\\n        IAvatar(_avatar).mint(_receiver, _numberOfTokens);\\n\\n        // mint tokens from key card\\n        IKeyCard(_keyCard).mint(_receiver, _keyCardToBeMinted);\\n    }\\n\\n    /// @notice set new discount signer\\n    /// @dev set new discount signer\\n    /// @param _newDiscountSigner new discount signer\\n    function _setDiscountSigner(address _newDiscountSigner) internal {\\n        _discountSigner = _newDiscountSigner;\\n        emit DiscountSignerUpdated(_newDiscountSigner);\\n    }\\n\\n    function _setDiscountCodeApplied(uint256 _discountIndex) internal {\\n        _appliedDiscountIndex[_discountIndex] = true;\\n        emit DiscountCodeApplied(_discountIndex);\\n    }\\n\\n    /// @notice get avatar NFT contract instance\\n    /// @dev getter for avatar NFT instance\\n    /// @return avatar NFT instance\\n    function _getAvatar() internal view returns (address) {\\n        return _avatar;\\n    }\\n\\n    /// @notice get key card NFT contract instance\\n    /// @dev getter for key card NFT instance\\n    /// @return key card NFT instance\\n    function _getKeyCard() internal view returns (address) {\\n        return _keyCard;\\n    }\\n\\n    /// @notice get sale category\\n    /// @dev get sale category\\n    /// @param _saleCategoryId sale category id\\n    /// @return returns sale category struct\\n    function _getSaleCategory(\\n        uint256 _saleCategoryId\\n    ) internal view returns (SaleCategory memory) {\\n        // checks\\n        _requireExistentSaleCategory(_saleCategoryId);\\n        // return sale category struct\\n        return _saleCategories[_saleCategoryId];\\n    }\\n\\n    /// @notice get number of sale categories that have been added\\n    /// @dev get number of sale categories that have been added\\n    /// @return counter number of sale category that have been added\\n    function _getSaleCategoryCounter() internal view returns (uint256 counter) {\\n        return _saleCounter.current();\\n    }\\n\\n    /// @notice get discount signer address\\n    /// @dev get discount signer address\\n    /// @return discountSigner the address of signer who signs discount codes\\n    function _getDiscountSigner()\\n        internal\\n        view\\n        returns (address discountSigner)\\n    {\\n        return _discountSigner;\\n    }\\n\\n    function _setNewPhase(PHASE_ID _newPhase) internal {\\n        // check if really phase is changing\\n        _requireChangeInPhase(_newPhase);\\n\\n        // set new phase\\n        _currentPhase = _newPhase;\\n\\n        // emit phase changed\\n        emit PhaseChanged(_newPhase);\\n    }\\n\\n    function _getCurrentPhase() internal view returns (PHASE_ID) {\\n        return _currentPhase;\\n    }\\n\\n    function _getTokensToReserveInPhase(\\n        PHASE_ID _phaseId\\n    ) internal view returns (uint96) {\\n        return _tokensToReserve[_phaseId];\\n    }\\n\\n    function _setTokenToReserveOfPhase(\\n        PHASE_ID _phaseId,\\n        uint96 _numberOfTokens\\n    ) internal {\\n        // cannot update tokens to reserve for phase that is already reserved\\n        _requireTokensNotAlreadyReservedForPhase(_phaseId);\\n        _tokensToReserve[_phaseId] = _numberOfTokens;\\n        emit TokenToReserveUpdated(_phaseId, _numberOfTokens);\\n    }\\n\\n    function _setTokensReservedForPhase(PHASE_ID _phaseId) internal {\\n        _reservedForPhase[_phaseId] = true;\\n    }\\n\\n    function _checkIfTokenReservedForPhase(\\n        PHASE_ID _phaseId\\n    ) internal view returns (bool) {\\n        return _reservedForPhase[_phaseId];\\n    }\\n\\n    function _reserveTokens(PHASE_ID _phaseId) internal {\\n        // checks\\n        _requirePhaseToBeActive(_phaseId);\\n        _requireTokensNotAlreadyReservedForPhase(_phaseId);\\n\\n        // set tokens reserved\\n        uint96 numberOfTokens = _getTokensToReserveInPhase(_phaseId);\\n        address receiver = address(0);\\n        _setTokensReservedForPhase(_phaseId);\\n\\n        // reserve tokens\\n        // todo: 1) Mint tokens from avatar to vault addres\\n\\n        emit TokensReserved(_phaseId, numberOfTokens, receiver);\\n    }\\n\\n    function _checkValidDiscountCode(\\n        uint256 _discountIndex,\\n        uint256 _discountedPrice,\\n        address _receiverAddress,\\n        bytes memory _signature\\n    ) internal view returns (bool _isDiscountValid) {\\n        _requireDiscountCodeIndexValid(_discountIndex);\\n\\n        // generate discount code hash\\n        // discountIndex + discountedPrice + receiver address + \\\"Panchabhoot Discount Code\\\"\\n        bytes32 _discountHash = keccak256(\\n            abi.encodePacked(\\n                _discountIndex,\\n                _discountedPrice,\\n                _receiverAddress,\\n                \\\"://Panchabhoot Discount Code\\\"\\n            )\\n        );\\n\\n        // Signature is produced by signing a keccak256 hash with the following format:\\n        // \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        bytes32 ethSignedMessageHash = _discountHash.toEthSignedMessageHash();\\n\\n        // check if discount code is applied or not\\n        _isDiscountValid = SignatureChecker.isValidSignatureNow(\\n            _discountSigner,\\n            ethSignedMessageHash,\\n            _signature\\n        );\\n\\n        // check if signature is valid or not\\n        if (!_isDiscountValid) {\\n            revert InvalidDiscountCode();\\n        }\\n    }\\n\\n    // check internal functions\\n    function _requireValidTimePeriod(\\n        uint96 _newStartTime,\\n        uint96 _newEndTime\\n    ) private view {\\n        // checks\\n        // end time cannot be behind start time\\n        if (_newEndTime <= _newStartTime) {\\n            revert EndTimeBehindStartTime(_newStartTime, _newEndTime);\\n        }\\n        // start time cannot be in past\\n        if (_newStartTime < uint96(block.timestamp)) {\\n            revert StartTimeInPast(_newStartTime);\\n        }\\n    }\\n\\n    function _requireValidLimits(\\n        uint64 _perWalletLimit,\\n        uint64 _perTransactionLimit\\n    ) private pure {\\n        // check if transaction limit is less than wallet limit\\n        // if transaction limit is greater than wallet limit that means,\\n        //    a user can never mint tokens greater than wallet limit\\n        if (_perTransactionLimit > _perWalletLimit) {\\n            revert PerTransactionLimitGreaterThanPerWalletLimit(\\n                _perTransactionLimit,\\n                _perWalletLimit\\n            );\\n        }\\n    }\\n\\n    function _requireExistentSaleCategory(\\n        uint256 _saleCategoryId\\n    ) private view {\\n        // check if sale category exists or not\\n        if (_saleCounter.current() < _saleCategoryId || _saleCategoryId == 0) {\\n            revert InexistentSaleCategory(_saleCategoryId);\\n        }\\n    }\\n\\n    function _requireDiscountCodeIndexValid(\\n        uint256 _discountIndex\\n    ) private view {\\n        // check if discount code is already applied or not\\n        if (_appliedDiscountIndex[_discountIndex]) {\\n            revert DiscountCodeAlreadyUsed(_discountIndex);\\n        }\\n    }\\n\\n    function _requireTokensNotAlreadyReservedForPhase(\\n        PHASE_ID _phaseId\\n    ) private view {\\n        if (_reservedForPhase[_phaseId]) {\\n            revert TokensAlreadyReservedForPhase(_phaseId);\\n        }\\n    }\\n\\n    function _requireChangeInPhase(PHASE_ID _newPhaseId) private view {\\n        if (_currentPhase == _newPhaseId) {\\n            revert PhaseIsAlreadyActive(_newPhaseId);\\n        }\\n    }\\n\\n    function _requireSameArrayLength(\\n        PHASE_ID[] memory _phaseId,\\n        uint96[] memory _numberOfTokens\\n    ) internal pure {\\n        // check if both arrays have same length\\\\\\n        if (_phaseId.length != _numberOfTokens.length) {\\n            revert ArraysLengthDontMatch();\\n        }\\n    }\\n\\n    function _requirePhaseToBeActive(PHASE_ID _phaseId) private view {\\n        if (_currentPhase != _phaseId) {\\n            revert PhaseInactive(_phaseId);\\n        }\\n    }\\n\\n    function _requireSaleValid(\\n        address _receiver,\\n        uint256 _numberOfTokens,\\n        uint256 _saleId,\\n        SaleCategory memory _sale\\n    ) private view {\\n        uint256 tokensCurrentlyMintedByUser = _tokensMintedByUser[_saleId][\\n            _receiver\\n        ];\\n        if (\\n            _sale.startTime >= block.timestamp ||\\n            _sale.endTime <= block.timestamp\\n        ) {\\n            revert SaleNotActive();\\n        }\\n        if (_numberOfTokens > _sale.perTransactionLimit) {\\n            // revert with number of tokens to be minted more than per transaction limit\\n            revert ExceedsTokensPerTransactionLimit();\\n        }\\n        if (\\n            tokensCurrentlyMintedByUser + _numberOfTokens > _sale.perWalletLimit\\n        ) {\\n            // revert with buying limit is exceeded\\n            revert ExceedsTokensPerWalletLimit();\\n        }\\n        // note: as discount can be applied, price is checked separately\\n        if (_sale.tokensMinted + _numberOfTokens > _sale.supply) {\\n            // revert with suuply exceeded\\n            revert ExceedsSaleSupply();\\n        }\\n    }\\n\\n    function _requireSaleNotPaused(SaleCategory memory _sale) private pure {\\n        if (_sale.paused) {\\n            revert SalePaused();\\n        }\\n    }\\n\\n    function _requireSaleIsDiscounted(SaleCategory memory _sale) private pure {\\n        if (!_sale.isDiscountEnabled) {\\n            // revert with discount not enabled for this sale\\n            revert SaleNotDiscounted();\\n        }\\n    }\\n\\n    function _requireValidAllowlist(\\n        bytes32[] calldata _proofs,\\n        address _account,\\n        bytes32 _merkleRoot\\n    ) private pure {\\n        // generate leaf\\n        bytes32 leaf = keccak256(abi.encodePacked(_account));\\n        // verify\\n        bool isAllowlisted = MerkleProof.verify(_proofs, _merkleRoot, leaf);\\n        if (!isAllowlisted) {\\n            revert AccountNotInAllowlist();\\n        }\\n    }\\n\\n    function _requireSaleToBeAllowlisted(\\n        SaleCategory memory _sale\\n    ) private pure {\\n        if (_sale.merkleRoot == bytes32(0)) {\\n            // sale not enabled\\n            revert SaleNotAllowlisted();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x826a4a725a77f94db9f1197332df0880fff2ba54db38b80a6b9c67660c4a1611\",\"license\":\"MIT\"},\"contracts/Controller/ControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IController} from \\\"./IController.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nabstract contract ControllerStorage is IController {\\n    /// @notice logs when new avatar is updated\\n    /// @dev emitted when new avatar contract is added\\n    /// @param _oldAvatar old avatar contract address\\n    /// @param _newAvatar new avatar contract address\\n    event AvatarUpdated(address _oldAvatar, address _newAvatar);\\n\\n    /// @notice logs when new member key card is updated\\n    /// @dev emitted when new member key card contract is added\\n    /// @param _oldKeyCard old member key card contract address\\n    /// @param _newKeyCard new member key card contract address\\n    event MemberKeyCardUpdated(address _oldKeyCard, address _newKeyCard);\\n\\n    /// @notice logs when new sale category is added\\n    /// @dev emitted when new sale category is added\\n    /// @param _saleCategoryId sale category ID\\n    /// @param _phase phase of sale category\\n    event AddedSaleCategory(uint256 _saleCategoryId, uint8 _phase);\\n\\n    /// @notice logs when start time and end time is updated for a sale category\\n    /// @dev emitted when start time and end time is updated for a sale category\\n    /// @param _saleCategoryId id of sale category which is updated\\n    /// @param _newStartTime updated start time of sale category\\n    /// @param _newEndTime updated start time of sale category\\n    event TimeUpdatedForSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint96 _newStartTime,\\n        uint96 _newEndTime\\n    );\\n\\n    /// @notice logs when new price is set for sale category\\n    /// @dev emitted when a new price is set for sale category\\n    /// @param _saleCategoryId id of sale category which is updated\\n    /// @param _newPrice updated price of this category\\n    event PriceUpdatedForSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint256 _newPrice\\n    );\\n\\n    /// @notice logs when merkle root is updated for sale category\\n    /// @dev wmitted when a new merkle root is set for sale category\\n    /// @param _saleCategoryId id of sale category which is updated\\n    /// @param _newMerkleRoot updated merkle root of this category\\n    event MerkleRootUpdatedSaleCategory(\\n        uint256 _saleCategoryId,\\n        bytes32 _newMerkleRoot\\n    );\\n\\n    /// @notice logs when limit per wallet and transaction is updated for sale category\\n    /// @dev emitted when limit per wallet and transaction is updated for sale category\\n    /// @param _saleCategoryId id of sale category which is updated\\n    /// @param _newPerTransactionLimit new per transaction limit\\n    /// @param _newPerWalletLimit new per wallet limit\\n    event PerLimitUpdatedOfSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newPerTransactionLimit,\\n        uint64 _newPerWalletLimit\\n    );\\n\\n    /// @notice logs when supply of sale category is updated\\n    /// @dev emitted when supply of sale category is updated\\n    /// @param _saleCategoryId id of sale category which is updated\\n    /// @param _newSupplyForTheSale new supply for this sale category\\n    event SupplyUpdatedForSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newSupplyForTheSale\\n    );\\n\\n    /// @notice logs when key card : avatar NFT ratio is updated for a sale category\\n    /// @dev emitted when key card : avatar NFT ratio is updated for a sale category\\n    /// @param _saleCategoryId id of sale category which is updated\\n    /// @param _newKeyCardRatio new key card ratio\\n    event KeyCardRatioUpdatedForSaleCategory(\\n        uint256 _saleCategoryId,\\n        uint64 _newKeyCardRatio\\n    );\\n\\n    event PausedSale(uint256 _saleCategoryId);\\n\\n    event UnpausedSale(uint256 _saleCategoryId);\\n\\n    /// @notice logs when discount is enabled for sale category\\n    /// @dev emitted when discount is enabled for sale category\\n    /// @param _saleCategoryId id of sale category which is updated\\n    event DiscountEnabledOnSaleCategory(uint256 _saleCategoryId);\\n\\n    /// @notice logs when discount is disabled for sale category\\n    /// @dev emitted when discount is disabled for sale category\\n    /// @param _saleCategoryId id of sale category which is updated\\n    event DiscountDisabledOnSaleCategory(uint256 _saleCategoryId);\\n\\n    /// @notice logs when discount signer is updated\\n    /// @dev emitted when discount signer is updated\\n    /// @param _newDiscountSigner address of new discount signer\\n    event DiscountSignerUpdated(address _newDiscountSigner);\\n\\n    /// @notice logs when discount code index is applied\\n    /// @dev emitted when discount code index is applied\\n    /// @param _discountCodeIndex discount code index which is applied\\n    event DiscountCodeApplied(uint256 _discountCodeIndex);\\n\\n    event PhaseChanged(PHASE_ID newPhaseId);\\n\\n    event TokenToReserveUpdated(PHASE_ID phaseId, uint96 tokensToReserve);\\n\\n    event TokensReserved(\\n        PHASE_ID phaseId,\\n        uint96 numberOfTokensReserved,\\n        address receiver\\n    );\\n\\n    PHASE_ID internal _currentPhase;\\n\\n    /// @notice avatar which will be distributed from controller\\n    /// @dev instance of Avatar NFT contract that will be distributed in this phase\\n    address internal _avatar;\\n\\n    /// @notice key card which will be distributed from controller along with avatar\\n    /// @dev instance of MemberKeyCard contract that will be distributed in this phase with avatar\\n    address internal _keyCard;\\n\\n    /// @notice address that will sign discount codes\\n    /// @dev discount codes are signed by this address\\n    address internal _discountSigner;\\n\\n    /// @notice lists of sale category details\\n    /// @dev mapping of sale category id to it's sale category details\\n    mapping(uint256 => SaleCategory) internal _saleCategories;\\n    mapping(uint256 => mapping(address => uint256))\\n        internal _tokensMintedByUser;\\n\\n    /// @notice discount code indexes which have been applied\\n    /// @dev if true, discount is applied\\n    mapping(uint256 => bool) internal _appliedDiscountIndex;\\n\\n    mapping(PHASE_ID => uint96) internal _tokensToReserve;\\n    mapping(PHASE_ID => bool) internal _reservedForPhase;\\n\\n    /// @notice counter of sales category that have been added\\n    /// @dev used to keep track of latest index of sale\\n    Counters.Counter internal _saleCounter;\\n\\n    uint256[50] internal __gap;\\n}\\n\",\"keccak256\":\"0x66ba51c6489a33cbd71beb34a1bcb3b6ff5283e69d46d5c851eeb809d522578f\",\"license\":\"MIT\"},\"contracts/Controller/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n    enum PHASE_ID {\\n        PHASE_1,\\n        PHASE_2,\\n        PHASE_3\\n    }\\n\\n    struct SaleCategory {\\n        uint256 price;\\n        bytes32 merkleRoot;\\n        uint64 perWalletLimit;\\n        uint64 perTransactionLimit;\\n        uint64 supply;\\n        uint64 tokensMinted;\\n        uint64 keyCardPerAvatar;\\n        uint96 startTime;\\n        uint96 endTime;\\n        PHASE_ID phase;\\n        bool paused;\\n        bool isDiscountEnabled;\\n    }\\n\\n    // function mintAvatar(address _receiver, uint256 _quantity) external payable;\\n\\n    // function mintAvatarAtDiscount(\\n    //     address _receiver,\\n    //     uint256 _quantity,\\n    //     uint256 _discountedPrice,\\n    //     uint256 _validUntil,\\n    //     uint256 _discountCodeHash,\\n    //     bytes memory _discountSignature\\n    // ) external payable;\\n\\n    // function mintAvatarWithAllowlist(\\n    //     address _receiver,\\n    //     uint256 _quantity,\\n    //     bytes32[] memory _proofs\\n    // ) external payable;\\n\\n    function setAvatar(address) external;\\n\\n    function setKeyCard(address) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function addSale(\\n        uint96 _startTime,\\n        uint96 _endTime,\\n        uint256 _price,\\n        bytes32 _merkleRoot,\\n        uint64 _perWalletLimit,\\n        uint64 _perTransactionLimit,\\n        uint64 _supply,\\n        uint64 _keyCardPerAvatar,\\n        PHASE_ID _phase,\\n        bool _isDiscountEnabled\\n    ) external;\\n\\n    // function setDiscountSigner(address _newDiscountSigner) external;\\n\\n    // function setTokensToReserve(uint256 _newTokensToReserve) external;\\n\\n    // function setIntervalToReserve(uint256 _newIntervalToReserve) external;\\n\\n    function getSaleCategoryCounter() external view returns (uint256);\\n\\n    // function getIntervalToReserve() external view returns (uint256);\\n\\n    // function getTokensToReserve() external view returns (uint256);\\n\\n    // function getDiscountSigner() external view returns (address);\\n\\n    function getSaleCategory(\\n        uint256 _saleCategoryId\\n    ) external view returns (SaleCategory memory);\\n\\n    function getKeyCard() external view returns (address);\\n\\n    function getAvatar() external view returns (address);\\n\\n    function checkDiscountCodeValidity(\\n        uint256 _discountIndex,\\n        uint256 _discountedPrice,\\n        address _receiverAddress,\\n        bytes memory _signature\\n    ) external view returns (bool);\\n\\n    // function getTokenMintedByAccountInPhase(uint8 _phaseId)\\n    //     external\\n    //     view\\n    //     returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b15e92c590c0d681559e317aad1a4be6ad3f9fb0ffe1aa325d60100a24e345f\",\"license\":\"MIT\"},\"contracts/KeyCard/IKeyCard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IKeyCard {\\n    function mint(address _receiver, uint256 _quantity) external;\\n}\\n\",\"keccak256\":\"0x80ad579b3c0ca1a3522f8975c406dc3b326269952e4767c0fa14877064cde90e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506155ce80620000216000396000f3fe60806040526004361061034e5760003560e01c806395e2b0a3116101bb578063c45ac050116100f7578063e18a35a911610095578063e88b77371161006f578063e88b773714610a55578063f2fde38b14610a7c578063f814e11c14610a9c578063ffa1ad7414610aaf57600080fd5b8063e18a35a914610a02578063e30c397814610a22578063e33b7de314610a4057600080fd5b8063d0d225be116100d1578063d0d225be1461096b578063d1455b551461098b578063d79779b2146109ab578063dbdf9ab6146109e257600080fd5b8063c45ac050146108f5578063ce7c2ac214610915578063cfe828451461094b57600080fd5b8063aa8b20f611610164578063b58e0ffa1161013e578063b58e0ffa1461088b578063bcce14e3146108ab578063bd2c1cf0146108cb578063c4025d3b146108e057600080fd5b8063aa8b20f614610827578063ac6be1011461084b578063b3476b221461086b57600080fd5b8063a3a40ea511610195578063a3a40ea51461079c578063a3f4df7e146107be578063a3f8eace1461080757600080fd5b806395e2b0a3146107015780639761d8a41461072e5780639852595c1461076657600080fd5b8063406072a91161028a5780636f463b291161023357806379ba50971161020d57806379ba5097146106995780638456cb59146106ae5780638b83209b146106c35780638da5cb5b146106e357600080fd5b80636f463b29146106445780636fe2602a14610664578063715018a61461068457600080fd5b80634ba58860116102645780634ba58860146105c85780635c975abb146105e8578063674dceea1461060057600080fd5b8063406072a91461054e578063462e0c481461059557806348b75044146105a857600080fd5b806310de3ee7116102f757806329083601116102d157806329083601146104ca5780633a98ef39146104ea5780633c3668b0146105095780633f4ba83a1461053957600080fd5b806310de3ee71461046a57806313c769bc1461048a57806319165587146104aa57600080fd5b8063086cfca811610328578063086cfca81461040a5780630a1fb57c1461042a578063101ac9fd1461043d57600080fd5b8063036945b71461039c5780630373863d146103d557806305db4bde146103f757600080fd5b36610397577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b3480156103a857600080fd5b506103bf6040518060200160405280600081525081565b6040516103cc91906149eb565b60405180910390f35b3480156103e157600080fd5b506103f56103f0366004614b06565b610af8565b005b6103f5610405366004614c4b565b610b69565b34801561041657600080fd5b506103f5610425366004614cc7565b610b90565b6103f5610438366004614ce4565b610ba4565b34801561044957600080fd5b50610452610bd8565b6040516001600160a01b0390911681526020016103cc565b34801561047657600080fd5b506103f5610485366004614d30565b610bf2565b34801561049657600080fd5b506103f56104a5366004614cc7565b610c16565b3480156104b657600080fd5b506103f56104c5366004614cc7565b610c27565b3480156104d657600080fd5b506103f56104e5366004614cc7565b610d97565b3480156104f657600080fd5b5060fb545b6040519081526020016103cc565b34801561051557600080fd5b50610529610524366004614d60565b610da8565b60405190151581526020016103cc565b34801561054557600080fd5b506103f5610db9565b34801561055a57600080fd5b506104fb610569366004614d7b565b6001600160a01b0391821660009081526101016020908152604080832093909416825291909152205490565b6103f56105a3366004614dee565b610dcb565b3480156105b457600080fd5b506103f56105c3366004614d7b565b610e03565b3480156105d457600080fd5b506103f56105e3366004614d60565b610f99565b3480156105f457600080fd5b5060335460ff16610529565b34801561060c57600080fd5b506104fb61061b366004614e59565b6000918252610131602090815260408084206001600160a01b0393909316845291905290205490565b34801561065057600080fd5b506103f561065f366004614e7e565b610faa565b34801561067057600080fd5b506103f561067f366004614ea0565b610fbc565b34801561069057600080fd5b506103f5610fcf565b3480156106a557600080fd5b506103f5610fe1565b3480156106ba57600080fd5b506103f561106c565b3480156106cf57600080fd5b506104526106de366004614edc565b61107c565b3480156106ef57600080fd5b506065546001600160a01b0316610452565b34801561070d57600080fd5b5061072161071c366004614edc565b6110ac565b6040516103cc9190614f2d565b34801561073a57600080fd5b5061074e610749366004614d60565b611116565b6040516001600160601b0390911681526020016103cc565b34801561077257600080fd5b506104fb610781366004614cc7565b6001600160a01b0316600090815260fe602052604090205490565b3480156107a857600080fd5b506107b1611121565b6040516103cc9190615038565b3480156107ca57600080fd5b506103bf6040518060400160405280601681526020017f50616e63686162686f6f7420436f6e74726f6c6c65720000000000000000000081525081565b34801561081357600080fd5b506104fb610822366004614cc7565b611130565b34801561083357600080fd5b5061012d5461010090046001600160a01b0316610452565b34801561085757600080fd5b506103f561086636600461505e565b611178565b34801561087757600080fd5b506103f561088636600461510e565b61119e565b34801561089757600080fd5b506105296108a636600461513a565b6111b0565b3480156108b757600080fd5b506103f56108c63660046151f8565b6111c9565b3480156108d757600080fd5b506104fb6113a4565b3480156108ec57600080fd5b506104526113ae565b34801561090157600080fd5b506104fb610910366004614d7b565b6113c3565b34801561092157600080fd5b506104fb610930366004614cc7565b6001600160a01b0316600090815260fd602052604090205490565b34801561095757600080fd5b506103f561096636600461510e565b6114a1565b34801561097757600080fd5b506103f5610986366004614d60565b6114b3565b34801561099757600080fd5b506103f56109a6366004614d30565b6114c4565b3480156109b757600080fd5b506104fb6109c6366004614cc7565b6001600160a01b03166000908152610100602052604090205490565b3480156109ee57600080fd5b506103f56109fd366004614e7e565b6114e4565b348015610a0e57600080fd5b506103f5610a1d36600461530a565b6114f6565b348015610a2e57600080fd5b506097546001600160a01b0316610452565b348015610a4c57600080fd5b5060fc546104fb565b348015610a6157600080fd5b50610a6a600381565b60405160ff90911681526020016103cc565b348015610a8857600080fd5b506103f5610a97366004614cc7565b611509565b6103f5610aaa36600461533d565b61157a565b348015610abb57600080fd5b506103bf6040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b610b006115a5565b610b0a82826115ff565b60005b8251811015610b6457610b52838281518110610b2b57610b2b6153e6565b6020026020010151838381518110610b4557610b456153e6565b602002602001015161163a565b80610b5c81615412565b915050610b0d565b505050565b6000610b74856116cf565b9050610b8781888888888888600161183e565b50505050505050565b610b986115a5565b610ba181611a51565b50565b6000610baf826116cf565b9050610bd28185858560008060405180602001604052806000815250600061183e565b50505050565b6000610bed61012f546001600160a01b031690565b905090565b610bfa6115a5565b8015610c0d57610c0982611acd565b5050565b610c0982611c74565b610c1e6115a5565b610ba181611e1e565b6001600160a01b038116600090815260fd6020526040902054610ca05760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084015b60405180910390fd5b6000610cab82611130565b905080600003610d115760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610c97565b8060fc6000828254610d23919061542b565b90915550506001600160a01b038216600090815260fe60205260409020805482019055610d508282611e79565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05691015b60405180910390a15050565b610d9f6115a5565b610ba181611f92565b6000610db382611fe8565b92915050565b610dc16115a5565b610dc961202c565b565b6000610dd6826116cf565b9050610dfb81878787878760008060405180602001604052806000815250600061207e565b505050505050565b6001600160a01b038116600090815260fd6020526040902054610e775760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610c97565b6000610e8383836113c3565b905080600003610ee95760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610c97565b6001600160a01b0383166000908152610100602052604081208054839290610f1290849061542b565b90915550506001600160a01b03808416600090815261010160209081526040808320938616835292905220805482019055610f4e8383836120a7565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b610fa16115a5565b610ba181612127565b610fb26115a5565b610c098282612190565b610fc46115a5565b610b6483838361233e565b610fd76115a5565b610dc96000612521565b60975433906001600160a01b031681146110635760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e657200000000000000000000000000000000000000000000006064820152608401610c97565b610ba181612521565b6110746115a5565b610dc961253a565b600060ff8281548110611091576110916153e6565b6000918252602090912001546001600160a01b031692915050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152610db3826116cf565b6000610db382612577565b6000610bed61012d5460ff1690565b60008061113c60fc5490565b611146904761542b565b9050611171838261116c866001600160a01b0316600090815260fe602052604090205490565b6125c1565b9392505050565b6111806115a5565b6111928a8a8a8a8a8a8a8a8a8a6125ff565b50505050505050505050565b6111a66115a5565b610c098282612891565b60006111be85858585612a4d565b90505b949350505050565b600054610100900460ff16158080156111e95750600054600160ff909116105b806112035750303b158015611203575060005460ff166001145b6112755760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c97565b6000805460ff191660011790558015611298576000805461ff0019166101001790555b81516003146112d3576040517f67ba6e4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112db612b5e565b6112e3612bd1565b6112eb612c44565b6112f58484612cb7565b6112fe87611a51565b61130786611e1e565b61131085611f92565b60005b82518110156113555761134381600281111561133157611331614ef5565b848381518110610b4557610b456153e6565b8061134d81615412565b915050611313565b508015610b87576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050505050565b6000610bed612d2c565b6000610bed61012e546001600160a01b031690565b6001600160a01b0382166000908152610100602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa15801561143c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611460919061543e565b61146a919061542b565b6001600160a01b03808616600090815261010160209081526040808320938816835292905220549091506111c190849083906125c1565b6114a96115a5565b610c098282612d38565b6114bb6115a5565b610ba181612ef3565b6114cc6115a5565b80156114db57610c0982612f50565b610c09826130f7565b6114ec6115a5565b610c0982826132a1565b6114fe6115a5565b610b64838383613450565b6115116115a5565b609780546001600160a01b0383166001600160a01b031990911681179091556115426065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000611585856116cf565b905061159a818a8a8a8a8a8a8a8a600161207e565b505050505050505050565b6065546001600160a01b03163314610dc95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c97565b8051825114610c09576040517f1e5233ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61164382613628565b80610133600084600281111561165b5761165b614ef5565b600281111561166c5761166c614ef5565b815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055507f814bb2ca83dc603a087712c268689fcc0ca58b78e3e2caa2af21ab0e5e25477c8282604051610d8b929190615457565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526117398261369d565b600082815261013060209081526040918290208251610180810184528154815260018201549281019290925260028082015467ffffffffffffffff80821695850195909552600160401b80820486166060860152600160801b820486166080860152600160c01b909104851660a0850152600383015494851660c08501526001600160601b03908504811660e0850152600160a01b90940490931661010083015260048101549192909161012084019160ff909116908111156117fe576117fe614ef5565b600281111561180f5761180f614ef5565b81526004919091015460ff61010082048116151560208401526201000090910416151560409091015292915050565b61184c8861012001516136ec565b6118558861374f565b61186a87876001600160601b0316878b61378c565b6000858152610131602090815260408083206001600160a01b038b168452909152812080546001600160601b03891692906118a690849061542b565b909155506118b79050888688613914565b8015611913576118c688613a89565b6118d284848985612a4d565b506118dc84613ac5565b6118ef836001600160601b03881661547b565b341461190e57604051631ee972f560e01b815260040160405180910390fd5b611947565b8751611928906001600160601b03881661547b565b341461194757604051631ee972f560e01b815260040160405180910390fd5b6000868960c0015167ffffffffffffffff166119639190615492565b61012d546040516340c10f1960e01b81526001600160a01b038b811660048301526001600160601b038b81166024840152939093169350610100909104909116906340c10f1990604401600060405180830381600087803b1580156119c757600080fd5b505af11580156119db573d6000803e3d6000fd5b505061012e546040516340c10f1960e01b81526001600160a01b038c811660048301526024820186905290911692506340c10f199150604401600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b50505050505050505050505050565b61012d80546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff85161790945560408051949093049091168084526020840191909152917fd4de48e66b336cc79b77fc1b591b65bb68deecf4d200b4f7a8bf2de905d974c39101610d8b565b611ad68161369d565b6000611ae1826116cf565b600161014082018190526000848152610130602090815260409182902084518155908401518184015590830151600280830180546060870151608088015160a089015167ffffffffffffffff9687166001600160801b031990941693909317600160401b9287168302176001600160801b0316600160801b918716919091026001600160c01b031617600160c01b928616929092029190911790915560c086015160038501805460e08901516101008a0151939096166001600160a01b0319909116176001600160601b03958616909302929092176001600160a01b0316600160a01b949091169390930292909217909155610120840151600483018054959650869593949193909260ff1990911691908490811115611c0357611c03614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517fe077d3b3de0015b16b2cf415d1cf12731d24026787498e2c7a3afd9e1578974890610d8b9084815260200190565b611c7d8161369d565b6000611c88826116cf565b600061014082018190528381526101306020908152604091829020835181559083015160018083019190915591830151600280830180546060870151608088015160a089015167ffffffffffffffff9687166001600160801b031990941693909317600160401b9287168302176001600160801b0316600160801b918716919091026001600160c01b031617600160c01b928616929092029190911790915560c086015160038501805460e08901516101008a0151939096166001600160a01b0319909116176001600160601b03958616909302929092176001600160a01b0316600160a01b949091169390930292909217909155610120840151600483018054959650869593949193909260ff1990911691908490811115611dad57611dad614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517f0bfb3fb217a1dec741e7b46a6d5b89dabf174cc821b3a48d1100b25dbed50f8590610d8b9084815260200190565b61012e80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f8948754ceb204cbd00768f5392091735e97d9f63305edd2348491f3f141894479101610d8b565b80471015611ec95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c97565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611f16576040519150601f19603f3d011682016040523d82523d6000602084013e611f1b565b606091505b5050905080610b645760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c97565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040519081527ffa9dd674d746cabbc1a8705f0487bbe14c359b6447dac6dc42a0e5fc24d7a53e906020015b60405180910390a150565b6000610134600083600281111561200157612001614ef5565b600281111561201257612012614ef5565b815260208101919091526040016000205460ff1692915050565b612034613b11565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6120878a613b63565b61209787878b8d60200151613b9e565b6111928a8a8a888888888861183e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610b64908490613c53565b612130816136ec565b61213981613628565b600061214482612577565b9050600061215183613d38565b7e518721c801ee0064d089bf8b73b1e9d0b1ed592fa3dc45e7121e2ed0d1aef6838383604051612183939291906154b5565b60405180910390a1505050565b6121998261369d565b60006121a4836116cf565b82815260008481526101306020908152604091829020835181559083015160018083019190915591830151600280830180546060870151608088015160a089015167ffffffffffffffff9687166001600160801b031990941693909317600160401b9287168302176001600160801b0316600160801b918716919091026001600160c01b031617600160c01b928616929092029190911790915560c086015160038501805460e08901516101008a0151939096166001600160a01b0319909116176001600160601b03958616909302929092176001600160a01b0316600160a01b949091169390930292909217909155610120840151600483018054959650869593949193909260ff19909116919084908111156122c4576122c4614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517fe0e06bfeea5b345ddfe97edd79de79d3a8a08e557f8eee7a9333dfda7ca90bb4906121839085908590918252602082015260400190565b6123478361369d565b6123518282613d84565b600061235c846116cf565b6001600160601b0384811660e083019081528482166101008401908152600088815261013060209081526040918290208651815590860151600180830191909155918601516002808301805460608a015160808b015160a08c015167ffffffffffffffff9687166001600160801b031990941693909317600160401b9287168302176001600160801b0316600160801b918716919091026001600160c01b031617600160c01b928616929092029190911790915560c089015160038501805498519751919094166001600160a01b03199098169790971795881602949094176001600160a01b0316600160a01b95909616949094029490941790925561012084015160048401805495965086959193909260ff199290921691849081111561248657612486614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517fa5d1c05d7cd489ecfcab9c7d580ef19c4ac3ccba2d65b9c034e13e305b82271f90612513908690869086909283526001600160601b03918216602084015216604082015260600190565b60405180910390a150505050565b609780546001600160a01b0319169055610ba181613e39565b612542613e8b565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120613390565b6000610133600083600281111561259057612590614ef5565b60028111156125a1576125a1614ef5565b81526020810191909152604001600020546001600160601b031692915050565b60fb546001600160a01b038416600090815260fd6020526040812054909183916125eb908661547b565b6125f591906154e9565b6111c1919061550b565b6126098a8a613d84565b6126138686613ede565b61262261013580546001019055565b600061262e6101355490565b905060006040518061018001604052808b81526020018a81526020018967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff168152602001600067ffffffffffffffff1681526020018667ffffffffffffffff1681526020018d6001600160601b031681526020018c6001600160601b031681526020018560028111156126cb576126cb614ef5565b815260006020808301829052861515604093840152858252610130815290829020835181559083015160018083019190915591830151600280830180546060870151608088015160a089015167ffffffffffffffff9687166001600160801b031990941693909317600160401b9287168302176001600160801b0316600160801b918716919091026001600160c01b031617600160c01b928616929092029190911790915560c086015160038501805460e08901516101008a0151939096166001600160a01b0319909116176001600160601b03958616909302929092176001600160a01b0316600160a01b949091169390930292909217909155610120840151600483018054959650869593949193909260ff19909116919084908111156127f6576127f6614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790557f8d219cdbf5dae647eaf6d932e34aadba18b2b528554fc7508d3c642ffc293ecd8285600281111561286957612869614ef5565b6040805192835260ff90911660208301520160405180910390a1505050505050505050505050565b61289a8261369d565b60006128a5836116cf565b67ffffffffffffffff83811660c083019081526000868152610130602090815260409182902085518155908501516001808301919091559185015160028083018054606089015160808a015160a08b0151958a166001600160801b031990931692909217600160401b918a168202176001600160801b0316600160801b928a16929092026001600160c01b031691909117600160c01b94891694909402939093179055935160038301805460e08901516101008a0151939098166001600160a01b0319909116176001600160601b03978816909302929092176001600160a01b0316600160a01b96909116959095029490941790935561012084015160048401805495965086959193909260ff19909216919084908111156129c9576129c9614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517fb051ce5a23a4b95c3b5e74be4a261fa630ef45f2d289d393758b26b9996e0a9390612183908590859091825267ffffffffffffffff16602082015260400190565b6000612a5885613f40565b604080516020808201889052818301879052606086811b6bffffffffffffffffffffffff1916908301527f3a2f2f50616e63686162686f6f7420446973636f756e7420436f6465000000006074830152825180830360700181526090830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060b084015260cc8084018290528451808503909101815260ec909301909352815191012061012f54612b1b906001600160a01b03168286613f8d565b925082612b54576040517fef9d514300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050949350505050565b600054610100900460ff16612bc95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c97565b610dc9614115565b600054610100900460ff16612c3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c97565b610dc961418c565b600054610100900460ff16612caf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c97565b610dc9614200565b600054610100900460ff16612d225760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c97565b610c098282614272565b6000610bed6101355490565b612d418261369d565b6000612d4c836116cf565b67ffffffffffffffff8381166080830190815260008681526101306020908152604091829020855181559085015160018083019190915591850151600280830180546060890151965160a08a01519489166001600160801b031990921691909117600160401b9789168802176001600160801b0316600160801b918916919091026001600160c01b031617600160c01b938816939093029290921790915560c086015160038301805460e08901516101008a0151939098166001600160a01b0319909116176001600160601b03978816909602959095176001600160a01b0316600160a01b969091169590950294909417909255610120840151600483018054959650869593949193909260ff19909116918490811115612e6f57612e6f614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517fd96161d72c61ee4a6e8beedde6bf85047686270a4ab726d89020724a0ffabee090612183908590859091825267ffffffffffffffff16602082015260400190565b612efc816143ff565b61012d805482919060ff19166001836002811115612f1c57612f1c614ef5565b02179055507fa6dcc92f45df25789d5639b7a0c97ba1edf3bb1c0b5dd3376fd96a0db87c464281604051611fdd9190615038565b612f598161369d565b6000612f64826116cf565b600161016082018190526000848152610130602090815260409182902084518155908401518184015590830151600280830180546060870151608088015160a089015167ffffffffffffffff9687166001600160801b031990941693909317600160401b9287168302176001600160801b0316600160801b918716919091026001600160c01b031617600160c01b928616929092029190911790915560c086015160038501805460e08901516101008a0151939096166001600160a01b0319909116176001600160601b03958616909302929092176001600160a01b0316600160a01b949091169390930292909217909155610120840151600483018054959650869593949193909260ff199091169190849081111561308657613086614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517f116f7727ba934816eeaddb8501a368b75bf2bd43eac1a42f12e45014b07d9bcb90610d8b9084815260200190565b6131008161369d565b600061310b826116cf565b600061016082018190528381526101306020908152604091829020835181559083015160018083019190915591830151600280830180546060870151608088015160a089015167ffffffffffffffff9687166001600160801b031990941693909317600160401b9287168302176001600160801b0316600160801b918716919091026001600160c01b031617600160c01b928616929092029190911790915560c086015160038501805460e08901516101008a0151939096166001600160a01b0319909116176001600160601b03958616909302929092176001600160a01b0316600160a01b949091169390930292909217909155610120840151600483018054959650869593949193909260ff199091169190849081111561323057613230614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517f7cc7287faeb3ff72ec95f1a48c949c862e9ffba6bfbcb0edc2bd9737fed3525590610d8b9084815260200190565b6132aa8261369d565b60006132b5836116cf565b6020818101848152600086815261013090925260409182902083518155905160018083019190915591830151600280830180546060870151608088015160a089015167ffffffffffffffff9687166001600160801b031990941693909317600160401b9287168302176001600160801b0316600160801b918716919091026001600160c01b031617600160c01b928616929092029190911790915560c086015160038501805460e08901516101008a0151939096166001600160a01b0319909116176001600160601b03958616909302929092176001600160a01b0316600160a01b949091169390930292909217909155610120840151600483018054959650869593949193909260ff19909116919084908111156133d6576133d6614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517f08374d736a43ab178fb76ce1ab2cdcf7b81db5d2be760199bd01e6ae7580f840906121839085908590918252602082015260400190565b6134598361369d565b6134638282613ede565b600061346e846116cf565b67ffffffffffffffff8381166060830190815285821660408085019182526000898152610130602090815291902085518155908501516001808301919091559151600280830180549551608089015160a08a01519489166001600160801b031990981697909717600160401b9189168202176001600160801b0316600160801b978916979097026001600160c01b031696909617600160c01b938816939093029290921790915560c086015160038301805460e08901516101008a0151939098166001600160a01b0319909116176001600160601b03978816909602959095176001600160a01b0316600160a01b969091169590950294909417909255610120840151600483018054959650869593949193909260ff1990911691849081111561359a5761359a614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff0019909316929092171790556040517f5fa72752376c1b5f6ebabff284a9a38f6ac9184b52818709fa919063e96dcb2f906125139086908590879092835267ffffffffffffffff918216602084015216604082015260600190565b610134600082600281111561363f5761363f614ef5565b600281111561365057613650614ef5565b815260208101919091526040016000205460ff1615610ba157806040517f3ca13295000000000000000000000000000000000000000000000000000000008152600401610c979190615038565b806136a86101355490565b10806136b2575080155b15610ba1576040517f6e58dcc400000000000000000000000000000000000000000000000000000000815260048101829052602401610c97565b8060028111156136fe576136fe614ef5565b61012d5460ff16600281111561371657613716614ef5565b14610ba157806040517f48858fcb000000000000000000000000000000000000000000000000000000008152600401610c979190615038565b80610140015115610ba1576040517f8a98cbd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152610131602090815260408083206001600160a01b038816845290915290205460e0820151426001600160601b039091161015806137dc5750428261010001516001600160601b031611155b15613813576040517fb7b2409700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816060015167ffffffffffffffff1684111561385b576040517f73d430c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604082015167ffffffffffffffff16613874858361542b565b11156138ac576040517ff160fd2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816080015167ffffffffffffffff16848360a0015167ffffffffffffffff166138d5919061542b565b111561390d576040517fa528427e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b808360a001818151613926919061551e565b67ffffffffffffffff908116909152600084815261013060209081526040918290208751815590870151600180830191909155918701516002808301805460608b015160808c015160a08d01519589166001600160801b031990931692909217600160401b9189168202176001600160801b0316600160801b928916929092026001600160c01b031691909117600160c01b9488169490940293909317905560c089015160038401805460e08c01516101008d0151939098166001600160a01b0319909116176001600160601b03978816909402939093176001600160a01b0316600160a01b969091169590950294909417905561012087015160048201805489965092949193909260ff1916918490811115613a4557613a45614ef5565b021790555061014082015160049091018054610160909301511515620100000262ff000019921515610100029290921662ffff001990931692909217179055505050565b806101600151610ba1576040517f987a2af000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152610132602052604090819020805460ff19166001179055517f4e888c698f79093e0b267944840223bf0886d25ea92228451b5915c7278fc16a90611fdd9083815260200190565b60335460ff16610dc95760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c97565b6020810151610ba1576040517f84a24e9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606084901b1660208201526000906034016040516020818303038152906040528051906020012090506000613c1a8686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508691506144629050565b905080610dfb576040517f7d4f213800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613ca8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166144789092919063ffffffff16565b805190915015610b645780806020019051810190613cc69190615546565b610b645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c97565b60016101346000836002811115613d5157613d51614ef5565b6002811115613d6257613d62614ef5565b81526020810191909152604001600020805460ff191691151591909117905550565b816001600160601b0316816001600160601b031611613de2576040517f54c06fbb0000000000000000000000000000000000000000000000000000000081526001600160601b03808416600483015282166024820152604401610c97565b426001600160601b0316826001600160601b03161015610c09576040517f7d9647250000000000000000000000000000000000000000000000000000000081526001600160601b0383166004820152602401610c97565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60335460ff1615610dc95760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610c97565b8167ffffffffffffffff168167ffffffffffffffff161115610c09576040517f2d28191f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015283166024820152604401610c97565b6000818152610132602052604090205460ff1615610ba1576040517fbd25304a00000000000000000000000000000000000000000000000000000000815260048101829052602401610c97565b6000806000613f9c8585614487565b90925090506000816004811115613fb557613fb5614ef5565b148015613fd35750856001600160a01b0316826001600160a01b0316145b15613fe357600192505050611171565b600080876001600160a01b0316631626ba7e60e01b888860405160240161400b929190615563565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051614076919061557c565b600060405180830381855afa9150503d80600081146140b1576040519150601f19603f3d011682016040523d82523d6000602084013e6140b6565b606091505b50915091508180156140c9575080516020145b8015614109575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090614107908301602090810190840161543e565b145b98975050505050505050565b600054610100900460ff166141805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c97565b6033805460ff19169055565b600054610100900460ff166141f75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c97565b610dc933612521565b600054610100900460ff1661426b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c97565b600160c955565b600054610100900460ff166142dd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c97565b80518251146143545760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e64207368617260448201527f6573206c656e677468206d69736d6174636800000000000000000000000000006064820152608401610c97565b60008251116143a55760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401610c97565b60005b8251811015610b64576143ed8382815181106143c6576143c66153e6565b60200260200101518383815181106143e0576143e06153e6565b60200260200101516144cc565b806143f781615412565b9150506143a8565b80600281111561441157614411614ef5565b61012d5460ff16600281111561442957614429614ef5565b03610ba157806040517f12d1b45b000000000000000000000000000000000000000000000000000000008152600401610c979190615038565b60008261446f85846146ce565b14949350505050565b60606111c1848460008561471b565b60008082516041036144bd5760208301516040840151606085015160001a6144b18782858561480d565b945094505050506144c5565b506000905060025b9250929050565b6001600160a01b0382166145485760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201527f7a65726f206164647265737300000000000000000000000000000000000000006064820152608401610c97565b600081116145985760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401610c97565b6001600160a01b038216600090815260fd6020526040902054156146245760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201527f20686173207368617265730000000000000000000000000000000000000000006064820152608401610c97565b60ff8054600181019091557fe08ec2af2cfc251225e1968fd6ca21e4044f129bffa95bac3503be8bdb30a3670180546001600160a01b0319166001600160a01b038416908117909155600090815260fd6020526040902081905560fb5461468c90829061542b565b60fb55604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac9101610d8b565b600081815b8451811015614713576146ff828683815181106146f2576146f26153e6565b60200260200101516148d1565b91508061470b81615412565b9150506146d3565b509392505050565b6060824710156147935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c97565b600080866001600160a01b031685876040516147af919061557c565b60006040518083038185875af1925050503d80600081146147ec576040519150601f19603f3d011682016040523d82523d6000602084013e6147f1565b606091505b5091509150614802878383876148fd565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561484457506000905060036148c8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614898573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166148c1576000600192509250506148c8565b9150600090505b94509492505050565b60008183106148ed576000828152602084905260409020611171565b5060009182526020526040902090565b6060831561496c578251600003614965576001600160a01b0385163b6149655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c97565b50816111c1565b6111c183838151156149815781518083602001fd5b8060405162461bcd60e51b8152600401610c9791906149eb565b60005b838110156149b657818101518382015260200161499e565b50506000910152565b600081518084526149d781602086016020860161499b565b601f01601f19169290920160200192915050565b60208152600061117160208301846149bf565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614a3d57614a3d6149fe565b604052919050565b600067ffffffffffffffff821115614a5f57614a5f6149fe565b5060051b60200190565b803560038110614a7857600080fd5b919050565b80356001600160601b0381168114614a7857600080fd5b600082601f830112614aa557600080fd5b81356020614aba614ab583614a45565b614a14565b82815260059290921b84018101918181019086841115614ad957600080fd5b8286015b84811015614afb57614aee81614a7d565b8352918301918301614add565b509695505050505050565b60008060408385031215614b1957600080fd5b823567ffffffffffffffff80821115614b3157600080fd5b818501915085601f830112614b4557600080fd5b81356020614b55614ab583614a45565b82815260059290921b84018101918181019089841115614b7457600080fd5b948201945b83861015614b9957614b8a86614a69565b82529482019490820190614b79565b96505086013592505080821115614baf57600080fd5b50614bbc85828601614a94565b9150509250929050565b6001600160a01b0381168114610ba157600080fd5b600082601f830112614bec57600080fd5b813567ffffffffffffffff811115614c0657614c066149fe565b614c19601f8201601f1916602001614a14565b818152846020838601011115614c2e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c08789031215614c6457600080fd5b8635614c6f81614bc6565b9550614c7d60208801614a7d565b945060408701359350606087013592506080870135915060a087013567ffffffffffffffff811115614cae57600080fd5b614cba89828a01614bdb565b9150509295509295509295565b600060208284031215614cd957600080fd5b813561117181614bc6565b600080600060608486031215614cf957600080fd5b8335614d0481614bc6565b9250614d1260208501614a7d565b9150604084013590509250925092565b8015158114610ba157600080fd5b60008060408385031215614d4357600080fd5b823591506020830135614d5581614d22565b809150509250929050565b600060208284031215614d7257600080fd5b61117182614a69565b60008060408385031215614d8e57600080fd5b8235614d9981614bc6565b91506020830135614d5581614bc6565b60008083601f840112614dbb57600080fd5b50813567ffffffffffffffff811115614dd357600080fd5b6020830191508360208260051b85010111156144c557600080fd5b600080600080600060808688031215614e0657600080fd5b8535614e1181614bc6565b9450614e1f60208701614a7d565b9350604086013567ffffffffffffffff811115614e3b57600080fd5b614e4788828901614da9565b96999598509660600135949350505050565b60008060408385031215614e6c57600080fd5b823591506020830135614d5581614bc6565b60008060408385031215614e9157600080fd5b50508035926020909101359150565b600080600060608486031215614eb557600080fd5b83359250614ec560208501614a7d565b9150614ed360408501614a7d565b90509250925092565b600060208284031215614eee57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110614f2957634e487b7160e01b600052602160045260246000fd5b9052565b60006101808201905082518252602083015160208301526040830151614f5f604084018267ffffffffffffffff169052565b506060830151614f7b606084018267ffffffffffffffff169052565b506080830151614f97608084018267ffffffffffffffff169052565b5060a0830151614fb360a084018267ffffffffffffffff169052565b5060c0830151614fcf60c084018267ffffffffffffffff169052565b5060e0830151614fea60e08401826001600160601b03169052565b50610100838101516001600160601b0316908301526101208084015161501282850182614f0b565b50506101408381015115159083015261016080840151801515828501525b505092915050565b60208101610db38284614f0b565b803567ffffffffffffffff81168114614a7857600080fd5b6000806000806000806000806000806101408b8d03121561507e57600080fd5b6150878b614a7d565b995061509560208c01614a7d565b985060408b0135975060608b013596506150b160808c01615046565b95506150bf60a08c01615046565b94506150cd60c08c01615046565b93506150db60e08c01615046565b92506150ea6101008c01614a69565b91506101208b01356150fb81614d22565b809150509295989b9194979a5092959850565b6000806040838503121561512157600080fd5b8235915061513160208401615046565b90509250929050565b6000806000806080858703121561515057600080fd5b8435935060208501359250604085013561516981614bc6565b9150606085013567ffffffffffffffff81111561518557600080fd5b61519187828801614bdb565b91505092959194509250565b600082601f8301126151ae57600080fd5b813560206151be614ab583614a45565b82815260059290921b840181019181810190868411156151dd57600080fd5b8286015b84811015614afb57803583529183019183016151e1565b60008060008060008060c0878903121561521157600080fd5b863561521c81614bc6565b955060208781013561522d81614bc6565b9550604088013561523d81614bc6565b9450606088013567ffffffffffffffff8082111561525a57600080fd5b818a0191508a601f83011261526e57600080fd5b813561527c614ab582614a45565b81815260059190911b8301840190848101908d83111561529b57600080fd5b938501935b828510156152c25784356152b381614bc6565b825293850193908501906152a0565b9750505060808a01359250808311156152da57600080fd5b6152e68b848c0161519d565b945060a08a01359250808311156152fc57600080fd5b5050614cba89828a01614a94565b60008060006060848603121561531f57600080fd5b8335925061532f60208501615046565b9150614ed360408501615046565b60008060008060008060008060e0898b03121561535957600080fd5b883561536481614bc6565b975061537260208a01614a7d565b9650604089013567ffffffffffffffff8082111561538f57600080fd5b61539b8c838d01614da9565b909850965060608b0135955060808b0135945060a08b0135935060c08b01359150808211156153c957600080fd5b506153d68b828c01614bdb565b9150509295985092959890939650565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615424576154246153fc565b5060010190565b80820180821115610db357610db36153fc565b60006020828403121561545057600080fd5b5051919050565b604081016154658285614f0b565b6001600160601b03831660208301529392505050565b8082028115828204841417610db357610db36153fc565b6001600160601b03818116838216028082169190828114615030576150306153fc565b606081016154c38286614f0b565b6001600160601b03841660208301526001600160a01b0383166040830152949350505050565b60008261550657634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610db357610db36153fc565b67ffffffffffffffff81811683821601908082111561553f5761553f6153fc565b5092915050565b60006020828403121561555857600080fd5b815161117181614d22565b8281526040602082015260006111c160408301846149bf565b6000825161558e81846020870161499b565b919091019291505056fea26469706673582212200d815a5bcf0f217bc359a8ceb4c97baa2288d5273876edcf6684c772e47d30ee64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mihirsinh Parmar <mihirsinh@chainlabs.in>",
    "details": "Controller owns the NFT contract from where it mints NFTs",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addSale(uint96,uint96,uint256,bytes32,uint64,uint64,uint64,uint64,uint8,bool)": {
        "details": "add new sale category",
        "params": {
          "_endTime": "end time of sale",
          "_isDiscountEnabled": "is discount enabled on this sale",
          "_keyCardPerAvatar": "number of Key Card to be given per avatar minted",
          "_merkleRoot": "merkle root of sale",
          "_perTransactionLimit": "allowed NFT limit per transaction",
          "_perWalletLimit": "allowed NFT limit per wallet",
          "_phase": "which phase does this sale category belongs to",
          "_price": "price per NFT of the sale",
          "_startTime": "start time of sale",
          "_supply": "supply of NFTs allowed to be sold in this sale category"
        }
      },
      "editKeyCardRatioOfSaleCategory(uint256,uint64)": {
        "details": "edit key card ratio of sale category",
        "params": {
          "_newKeyCardRatio": "new key card ratio",
          "_saleCategoryId": "sale category id"
        }
      },
      "editMerkleRootOfSaleCategory(uint256,bytes32)": {
        "details": "edit new merkle root of sale category",
        "params": {
          "_newMerkleRoot": "new merkle root of sale category id",
          "_saleCategoryId": "sale category id"
        }
      },
      "editPerLimitOfSaleCategory(uint256,uint64,uint64)": {
        "details": "edit limits for wallet or transaction",
        "params": {
          "_newPerTransactionLimit": "new limit per transaction",
          "_newPerWalletLimit": "new limit per wallet",
          "_saleCategoryId": "sale category id"
        }
      },
      "editPriceOfSaleCategory(uint256,uint256)": {
        "details": "edit new price of sale category",
        "params": {
          "_newPrice": "new price for this sale category",
          "_saleCategoryId": "sale category id"
        }
      },
      "editSaleTimeOfSaleCategory(uint256,uint96,uint96)": {
        "details": "edit new sale time of sale category",
        "params": {
          "_newEndTime": "new end time of sale category",
          "_newStartTime": "new start time of sale category",
          "_saleCategoryId": "sale category id"
        }
      },
      "editSupplyOfSaleCategory(uint256,uint64)": {
        "details": "edit new supply of sale category",
        "params": {
          "_newTokensSupply": "new supply of sale category",
          "_saleCategoryId": "sale category id"
        }
      },
      "getAvatar()": {
        "details": "getter for avatar NFT instance",
        "returns": {
          "_0": "avatar NFT instance"
        }
      },
      "getDiscountSigner()": {
        "details": "get discount signer address",
        "returns": {
          "_0": "discountSigner the address of signer who signs discount codes"
        }
      },
      "getKeyCard()": {
        "details": "getter for key card NFT instance",
        "returns": {
          "_0": "key card NFT instance"
        }
      },
      "getSaleCategory(uint256)": {
        "details": "get sale category",
        "params": {
          "_saleCategoryId": "sale category id"
        },
        "returns": {
          "_0": "returns sale category struct"
        }
      },
      "getSaleCategoryCounter()": {
        "details": "get number of sale categories that have been added",
        "returns": {
          "counter": "number of sale category that have been added"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause public functions"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "releasable(address)": {
        "details": "Getter for the amount of payee's releasable Ether."
      },
      "releasable(address,address)": {
        "details": "Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDiscountSigner(address)": {
        "details": "set new discount signer",
        "params": {
          "_newDiscountSigner": "new discount signer"
        }
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "toggleDiscountOfSaleCategory(uint256,bool)": {
        "details": "toggle discount for a sale category",
        "params": {
          "_isDiscounted": "is discount to be enabled",
          "_saleCategoryId": "sale category id"
        }
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause public functions"
      }
    },
    "title": "Controller",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddedSaleCategory(uint256,uint8)": {
        "notice": "logs when new sale category is added"
      },
      "AvatarUpdated(address,address)": {
        "notice": "logs when new avatar is updated"
      },
      "DiscountCodeApplied(uint256)": {
        "notice": "logs when discount code index is applied"
      },
      "DiscountDisabledOnSaleCategory(uint256)": {
        "notice": "logs when discount is disabled for sale category"
      },
      "DiscountEnabledOnSaleCategory(uint256)": {
        "notice": "logs when discount is enabled for sale category"
      },
      "DiscountSignerUpdated(address)": {
        "notice": "logs when discount signer is updated"
      },
      "KeyCardRatioUpdatedForSaleCategory(uint256,uint64)": {
        "notice": "logs when key card : avatar NFT ratio is updated for a sale category"
      },
      "MemberKeyCardUpdated(address,address)": {
        "notice": "logs when new member key card is updated"
      },
      "MerkleRootUpdatedSaleCategory(uint256,bytes32)": {
        "notice": "logs when merkle root is updated for sale category"
      },
      "PerLimitUpdatedOfSaleCategory(uint256,uint64,uint64)": {
        "notice": "logs when limit per wallet and transaction is updated for sale category"
      },
      "PriceUpdatedForSaleCategory(uint256,uint256)": {
        "notice": "logs when new price is set for sale category"
      },
      "SupplyUpdatedForSaleCategory(uint256,uint64)": {
        "notice": "logs when supply of sale category is updated"
      },
      "TimeUpdatedForSaleCategory(uint256,uint96,uint96)": {
        "notice": "logs when start time and end time is updated for a sale category"
      }
    },
    "kind": "user",
    "methods": {
      "addSale(uint96,uint96,uint256,bytes32,uint64,uint64,uint64,uint64,uint8,bool)": {
        "notice": "add new sale category"
      },
      "editKeyCardRatioOfSaleCategory(uint256,uint64)": {
        "notice": "edit key card ratio of sale category"
      },
      "editMerkleRootOfSaleCategory(uint256,bytes32)": {
        "notice": "edit new merkle root of sale category"
      },
      "editPerLimitOfSaleCategory(uint256,uint64,uint64)": {
        "notice": "edit limits of sale category"
      },
      "editPriceOfSaleCategory(uint256,uint256)": {
        "notice": "edit new price of sale category"
      },
      "editSaleTimeOfSaleCategory(uint256,uint96,uint96)": {
        "notice": "edit new sale time of sale category"
      },
      "editSupplyOfSaleCategory(uint256,uint64)": {
        "notice": "edit new supply of sale category"
      },
      "getAvatar()": {
        "notice": "get avatar NFT contract instance"
      },
      "getDiscountSigner()": {
        "notice": "get discount signer address"
      },
      "getKeyCard()": {
        "notice": "get key card NFT contract instance"
      },
      "getSaleCategory(uint256)": {
        "notice": "get sale category"
      },
      "getSaleCategoryCounter()": {
        "notice": "get number of sale categories that have been added"
      },
      "pause()": {
        "notice": "pause public functions"
      },
      "setDiscountSigner(address)": {
        "notice": "set new discount signer"
      },
      "toggleDiscountOfSaleCategory(uint256,bool)": {
        "notice": "toggle discount for a sale category"
      },
      "unpause()": {
        "notice": "unpause public functions"
      }
    },
    "notice": "This contract handles logic of the various NFT sales.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1153,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1156,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2235,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1336,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 1441,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 525,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 645,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 434,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 513,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1456,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1514,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 686,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_totalShares",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 688,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 692,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_shares",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 696,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_released",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 699,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_payees",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 704,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1593,t_uint256)"
      },
      {
        "astId": 711,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1593,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1145,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "258",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 8169,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_currentPhase",
        "offset": 0,
        "slot": "301",
        "type": "t_enum(PHASE_ID)8220"
      },
      {
        "astId": 8172,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_avatar",
        "offset": 1,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 8175,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_keyCard",
        "offset": 0,
        "slot": "302",
        "type": "t_address"
      },
      {
        "astId": 8178,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_discountSigner",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 8184,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_saleCategories",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_uint256,t_struct(SaleCategory)8246_storage)"
      },
      {
        "astId": 8190,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_tokensMintedByUser",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8195,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_appliedDiscountIndex",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 8200,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_tokensToReserve",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_enum(PHASE_ID)8220,t_uint96)"
      },
      {
        "astId": 8205,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_reservedForPhase",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_enum(PHASE_ID)8220,t_bool)"
      },
      {
        "astId": 8209,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "_saleCounter",
        "offset": 0,
        "slot": "309",
        "type": "t_struct(Counter)3682_storage"
      },
      {
        "astId": 8213,
        "contract": "contracts/Controller/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "310",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)1593": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(PHASE_ID)8220": {
        "encoding": "inplace",
        "label": "enum IController.PHASE_ID",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1593,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1593",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1593,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1593",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(PHASE_ID)8220,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(PHASE_ID)8220",
        "label": "mapping(enum IController.PHASE_ID => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_enum(PHASE_ID)8220,t_uint96)": {
        "encoding": "mapping",
        "key": "t_enum(PHASE_ID)8220",
        "label": "mapping(enum IController.PHASE_ID => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(SaleCategory)8246_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IController.SaleCategory)",
        "numberOfBytes": "32",
        "value": "t_struct(SaleCategory)8246_storage"
      },
      "t_struct(Counter)3682_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3681,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SaleCategory)8246_storage": {
        "encoding": "inplace",
        "label": "struct IController.SaleCategory",
        "members": [
          {
            "astId": 8222,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8224,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8226,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "perWalletLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 8228,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "perTransactionLimit",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 8230,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "supply",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 8232,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "tokensMinted",
            "offset": 24,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 8234,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "keyCardPerAvatar",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 8236,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "startTime",
            "offset": 8,
            "slot": "3",
            "type": "t_uint96"
          },
          {
            "astId": 8238,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "endTime",
            "offset": 20,
            "slot": "3",
            "type": "t_uint96"
          },
          {
            "astId": 8241,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "phase",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(PHASE_ID)8220"
          },
          {
            "astId": 8243,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "paused",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 8245,
            "contract": "contracts/Controller/Controller.sol:Controller",
            "label": "isDiscountEnabled",
            "offset": 2,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}