/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ControllerStorageInterface extends utils.Interface {
  functions: {};

  events: {
    "AvatarUpdated(address,address)": EventFragment;
    "MemberKeyCardUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvatarUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberKeyCardUpdated"): EventFragment;
}

export interface AvatarUpdatedEventObject {
  _oldAvatar: string;
  _newAvatar: string;
}
export type AvatarUpdatedEvent = TypedEvent<
  [string, string],
  AvatarUpdatedEventObject
>;

export type AvatarUpdatedEventFilter = TypedEventFilter<AvatarUpdatedEvent>;

export interface MemberKeyCardUpdatedEventObject {
  _oldKeyCard: string;
  _newKeyCard: string;
}
export type MemberKeyCardUpdatedEvent = TypedEvent<
  [string, string],
  MemberKeyCardUpdatedEventObject
>;

export type MemberKeyCardUpdatedEventFilter =
  TypedEventFilter<MemberKeyCardUpdatedEvent>;

export interface ControllerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AvatarUpdated(address,address)"(
      _oldAvatar?: null,
      _newAvatar?: null
    ): AvatarUpdatedEventFilter;
    AvatarUpdated(
      _oldAvatar?: null,
      _newAvatar?: null
    ): AvatarUpdatedEventFilter;

    "MemberKeyCardUpdated(address,address)"(
      _oldKeyCard?: null,
      _newKeyCard?: null
    ): MemberKeyCardUpdatedEventFilter;
    MemberKeyCardUpdated(
      _oldKeyCard?: null,
      _newKeyCard?: null
    ): MemberKeyCardUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
