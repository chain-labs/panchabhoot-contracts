/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IController {
  export type SaleCategoryStruct = {
    price: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    perWalletLimit: PromiseOrValue<BigNumberish>;
    perTransactionLimit: PromiseOrValue<BigNumberish>;
    supply: PromiseOrValue<BigNumberish>;
    tokensMinted: PromiseOrValue<BigNumberish>;
    keyCardPerAvatar: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    phase: PromiseOrValue<BigNumberish>;
    paused: PromiseOrValue<boolean>;
    isDiscountEnabled: PromiseOrValue<boolean>;
  };

  export type SaleCategoryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean,
    boolean
  ] & {
    price: BigNumber;
    merkleRoot: string;
    perWalletLimit: BigNumber;
    perTransactionLimit: BigNumber;
    supply: BigNumber;
    tokensMinted: BigNumber;
    keyCardPerAvatar: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    phase: number;
    paused: boolean;
    isDiscountEnabled: boolean;
  };
}

export interface ControllerInterface extends utils.Interface {
  functions: {
    "EMPTY_BYTES()": FunctionFragment;
    "MAX_PHASES()": FunctionFragment;
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addSale(uint96,uint96,uint256,bytes32,uint64,uint64,uint64,uint64,uint8,bool)": FunctionFragment;
    "checkDiscountCodeValidity(uint256,uint256,address,bytes)": FunctionFragment;
    "checkIfTokenReservedForPhase(uint8)": FunctionFragment;
    "editKeyCardRatioOfSaleCategory(uint256,uint64)": FunctionFragment;
    "editMerkleRootOfSaleCategory(uint256,bytes32)": FunctionFragment;
    "editPerLimitOfSaleCategory(uint256,uint64,uint64)": FunctionFragment;
    "editPriceOfSaleCategory(uint256,uint256)": FunctionFragment;
    "editSaleTimeOfSaleCategory(uint256,uint96,uint96)": FunctionFragment;
    "editSupplyOfSaleCategory(uint256,uint64)": FunctionFragment;
    "getAvatar()": FunctionFragment;
    "getCurrentPhase()": FunctionFragment;
    "getDiscountSigner()": FunctionFragment;
    "getKeyCard()": FunctionFragment;
    "getSaleCategory(uint256)": FunctionFragment;
    "getSaleCategoryCounter()": FunctionFragment;
    "getTokensToReserveInPhase(uint8)": FunctionFragment;
    "initialize(address,address,address,address[],uint256[],uint96[])": FunctionFragment;
    "mintAllowlisted(address,uint96,bytes32[],uint256)": FunctionFragment;
    "mintDiscounted(address,uint96,uint256,uint256,uint256,bytes)": FunctionFragment;
    "mintDiscountedAllowlist(address,uint96,bytes32[],uint256,uint256,uint256,bytes)": FunctionFragment;
    "mintPublic(address,uint96,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "payee(uint256)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "releasable(address)": FunctionFragment;
    "releasable(address,address)": FunctionFragment;
    "release(address)": FunctionFragment;
    "release(address,address)": FunctionFragment;
    "released(address,address)": FunctionFragment;
    "released(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveTokens(uint8)": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setDiscountSigner(address)": FunctionFragment;
    "setKeyCard(address)": FunctionFragment;
    "setNewPhase(uint8)": FunctionFragment;
    "setTokensToReserveInPhase(uint8[],uint96[])": FunctionFragment;
    "shares(address)": FunctionFragment;
    "toggleDiscountOfSaleCategory(uint256,bool)": FunctionFragment;
    "togglePauseSale(uint256,bool)": FunctionFragment;
    "tokensMintedByOwnerInSale(uint256,address)": FunctionFragment;
    "totalReleased(address)": FunctionFragment;
    "totalReleased()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EMPTY_BYTES"
      | "MAX_PHASES"
      | "NAME"
      | "VERSION"
      | "acceptOwnership"
      | "addSale"
      | "checkDiscountCodeValidity"
      | "checkIfTokenReservedForPhase"
      | "editKeyCardRatioOfSaleCategory"
      | "editMerkleRootOfSaleCategory"
      | "editPerLimitOfSaleCategory"
      | "editPriceOfSaleCategory"
      | "editSaleTimeOfSaleCategory"
      | "editSupplyOfSaleCategory"
      | "getAvatar"
      | "getCurrentPhase"
      | "getDiscountSigner"
      | "getKeyCard"
      | "getSaleCategory"
      | "getSaleCategoryCounter"
      | "getTokensToReserveInPhase"
      | "initialize"
      | "mintAllowlisted"
      | "mintDiscounted"
      | "mintDiscountedAllowlist"
      | "mintPublic"
      | "owner"
      | "pause"
      | "paused"
      | "payee"
      | "pendingOwner"
      | "releasable(address)"
      | "releasable(address,address)"
      | "release(address)"
      | "release(address,address)"
      | "released(address,address)"
      | "released(address)"
      | "renounceOwnership"
      | "reserveTokens"
      | "setAvatar"
      | "setDiscountSigner"
      | "setKeyCard"
      | "setNewPhase"
      | "setTokensToReserveInPhase"
      | "shares"
      | "toggleDiscountOfSaleCategory"
      | "togglePauseSale"
      | "tokensMintedByOwnerInSale"
      | "totalReleased(address)"
      | "totalReleased()"
      | "totalShares"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EMPTY_BYTES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PHASES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSale",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDiscountCodeValidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfTokenReservedForPhase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editKeyCardRatioOfSaleCategory",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editMerkleRootOfSaleCategory",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "editPerLimitOfSaleCategory",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editPriceOfSaleCategory",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editSaleTimeOfSaleCategory",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editSupplyOfSaleCategory",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getAvatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDiscountSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyCard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleCategory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleCategoryCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensToReserveInPhase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAllowlisted",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintDiscounted",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintDiscountedAllowlist",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPublic",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasable(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releasable(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "release(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "release(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "released(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "released(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeyCard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewPhase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokensToReserveInPhase",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shares",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDiscountOfSaleCategory",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "togglePauseSale",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensMintedByOwnerInSale",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "EMPTY_BYTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_PHASES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkDiscountCodeValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfTokenReservedForPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editKeyCardRatioOfSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editMerkleRootOfSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPerLimitOfSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPriceOfSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editSaleTimeOfSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editSupplyOfSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiscountSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKeyCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleCategoryCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensToReserveInPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintDiscounted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintDiscountedAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPublic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasable(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasable(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "release(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "release(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "released(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "released(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeyCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokensToReserveInPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleDiscountOfSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePauseSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensMintedByOwnerInSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AddedSaleCategory(uint256,uint8)": EventFragment;
    "AvatarUpdated(address,address)": EventFragment;
    "DiscountCodeApplied(uint256)": EventFragment;
    "DiscountDisabledOnSaleCategory(uint256)": EventFragment;
    "DiscountEnabledOnSaleCategory(uint256)": EventFragment;
    "DiscountSignerUpdated(address)": EventFragment;
    "ERC20PaymentReleased(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KeyCardRatioUpdatedForSaleCategory(uint256,uint64)": EventFragment;
    "MemberKeyCardUpdated(address,address)": EventFragment;
    "MerkleRootUpdatedSaleCategory(uint256,bytes32)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PausedSale(uint256)": EventFragment;
    "PayeeAdded(address,uint256)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
    "PaymentReleased(address,uint256)": EventFragment;
    "PerLimitUpdatedOfSaleCategory(uint256,uint64,uint64)": EventFragment;
    "PhaseChanged(uint8)": EventFragment;
    "PriceUpdatedForSaleCategory(uint256,uint256)": EventFragment;
    "SupplyUpdatedForSaleCategory(uint256,uint64)": EventFragment;
    "TimeUpdatedForSaleCategory(uint256,uint96,uint96)": EventFragment;
    "TokenToReserveUpdated(uint8,uint96)": EventFragment;
    "TokensReserved(uint8,uint96,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UnpausedSale(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedSaleCategory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiscountCodeApplied"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiscountDisabledOnSaleCategory"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiscountEnabledOnSaleCategory"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiscountSignerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20PaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "KeyCardRatioUpdatedForSaleCategory"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberKeyCardUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MerkleRootUpdatedSaleCategory"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReleased"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PerLimitUpdatedOfSaleCategory"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PriceUpdatedForSaleCategory"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SupplyUpdatedForSaleCategory"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeUpdatedForSaleCategory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenToReserveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensReserved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpausedSale"): EventFragment;
}

export interface AddedSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
  _phase: number;
}
export type AddedSaleCategoryEvent = TypedEvent<
  [BigNumber, number],
  AddedSaleCategoryEventObject
>;

export type AddedSaleCategoryEventFilter =
  TypedEventFilter<AddedSaleCategoryEvent>;

export interface AvatarUpdatedEventObject {
  _oldAvatar: string;
  _newAvatar: string;
}
export type AvatarUpdatedEvent = TypedEvent<
  [string, string],
  AvatarUpdatedEventObject
>;

export type AvatarUpdatedEventFilter = TypedEventFilter<AvatarUpdatedEvent>;

export interface DiscountCodeAppliedEventObject {
  _discountCodeIndex: BigNumber;
}
export type DiscountCodeAppliedEvent = TypedEvent<
  [BigNumber],
  DiscountCodeAppliedEventObject
>;

export type DiscountCodeAppliedEventFilter =
  TypedEventFilter<DiscountCodeAppliedEvent>;

export interface DiscountDisabledOnSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
}
export type DiscountDisabledOnSaleCategoryEvent = TypedEvent<
  [BigNumber],
  DiscountDisabledOnSaleCategoryEventObject
>;

export type DiscountDisabledOnSaleCategoryEventFilter =
  TypedEventFilter<DiscountDisabledOnSaleCategoryEvent>;

export interface DiscountEnabledOnSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
}
export type DiscountEnabledOnSaleCategoryEvent = TypedEvent<
  [BigNumber],
  DiscountEnabledOnSaleCategoryEventObject
>;

export type DiscountEnabledOnSaleCategoryEventFilter =
  TypedEventFilter<DiscountEnabledOnSaleCategoryEvent>;

export interface DiscountSignerUpdatedEventObject {
  _newDiscountSigner: string;
}
export type DiscountSignerUpdatedEvent = TypedEvent<
  [string],
  DiscountSignerUpdatedEventObject
>;

export type DiscountSignerUpdatedEventFilter =
  TypedEventFilter<DiscountSignerUpdatedEvent>;

export interface ERC20PaymentReleasedEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type ERC20PaymentReleasedEvent = TypedEvent<
  [string, string, BigNumber],
  ERC20PaymentReleasedEventObject
>;

export type ERC20PaymentReleasedEventFilter =
  TypedEventFilter<ERC20PaymentReleasedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KeyCardRatioUpdatedForSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
  _newKeyCardRatio: BigNumber;
}
export type KeyCardRatioUpdatedForSaleCategoryEvent = TypedEvent<
  [BigNumber, BigNumber],
  KeyCardRatioUpdatedForSaleCategoryEventObject
>;

export type KeyCardRatioUpdatedForSaleCategoryEventFilter =
  TypedEventFilter<KeyCardRatioUpdatedForSaleCategoryEvent>;

export interface MemberKeyCardUpdatedEventObject {
  _oldKeyCard: string;
  _newKeyCard: string;
}
export type MemberKeyCardUpdatedEvent = TypedEvent<
  [string, string],
  MemberKeyCardUpdatedEventObject
>;

export type MemberKeyCardUpdatedEventFilter =
  TypedEventFilter<MemberKeyCardUpdatedEvent>;

export interface MerkleRootUpdatedSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
  _newMerkleRoot: string;
}
export type MerkleRootUpdatedSaleCategoryEvent = TypedEvent<
  [BigNumber, string],
  MerkleRootUpdatedSaleCategoryEventObject
>;

export type MerkleRootUpdatedSaleCategoryEventFilter =
  TypedEventFilter<MerkleRootUpdatedSaleCategoryEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PausedSaleEventObject {
  _saleCategoryId: BigNumber;
}
export type PausedSaleEvent = TypedEvent<[BigNumber], PausedSaleEventObject>;

export type PausedSaleEventFilter = TypedEventFilter<PausedSaleEvent>;

export interface PayeeAddedEventObject {
  account: string;
  shares: BigNumber;
}
export type PayeeAddedEvent = TypedEvent<
  [string, BigNumber],
  PayeeAddedEventObject
>;

export type PayeeAddedEventFilter = TypedEventFilter<PayeeAddedEvent>;

export interface PaymentReceivedEventObject {
  from: string;
  amount: BigNumber;
}
export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber],
  PaymentReceivedEventObject
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export interface PaymentReleasedEventObject {
  to: string;
  amount: BigNumber;
}
export type PaymentReleasedEvent = TypedEvent<
  [string, BigNumber],
  PaymentReleasedEventObject
>;

export type PaymentReleasedEventFilter = TypedEventFilter<PaymentReleasedEvent>;

export interface PerLimitUpdatedOfSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
  _newPerTransactionLimit: BigNumber;
  _newPerWalletLimit: BigNumber;
}
export type PerLimitUpdatedOfSaleCategoryEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PerLimitUpdatedOfSaleCategoryEventObject
>;

export type PerLimitUpdatedOfSaleCategoryEventFilter =
  TypedEventFilter<PerLimitUpdatedOfSaleCategoryEvent>;

export interface PhaseChangedEventObject {
  newPhaseId: number;
}
export type PhaseChangedEvent = TypedEvent<[number], PhaseChangedEventObject>;

export type PhaseChangedEventFilter = TypedEventFilter<PhaseChangedEvent>;

export interface PriceUpdatedForSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
  _newPrice: BigNumber;
}
export type PriceUpdatedForSaleCategoryEvent = TypedEvent<
  [BigNumber, BigNumber],
  PriceUpdatedForSaleCategoryEventObject
>;

export type PriceUpdatedForSaleCategoryEventFilter =
  TypedEventFilter<PriceUpdatedForSaleCategoryEvent>;

export interface SupplyUpdatedForSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
  _newSupplyForTheSale: BigNumber;
}
export type SupplyUpdatedForSaleCategoryEvent = TypedEvent<
  [BigNumber, BigNumber],
  SupplyUpdatedForSaleCategoryEventObject
>;

export type SupplyUpdatedForSaleCategoryEventFilter =
  TypedEventFilter<SupplyUpdatedForSaleCategoryEvent>;

export interface TimeUpdatedForSaleCategoryEventObject {
  _saleCategoryId: BigNumber;
  _newStartTime: BigNumber;
  _newEndTime: BigNumber;
}
export type TimeUpdatedForSaleCategoryEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TimeUpdatedForSaleCategoryEventObject
>;

export type TimeUpdatedForSaleCategoryEventFilter =
  TypedEventFilter<TimeUpdatedForSaleCategoryEvent>;

export interface TokenToReserveUpdatedEventObject {
  phaseId: number;
  tokensToReserve: BigNumber;
}
export type TokenToReserveUpdatedEvent = TypedEvent<
  [number, BigNumber],
  TokenToReserveUpdatedEventObject
>;

export type TokenToReserveUpdatedEventFilter =
  TypedEventFilter<TokenToReserveUpdatedEvent>;

export interface TokensReservedEventObject {
  phaseId: number;
  numberOfTokensReserved: BigNumber;
  receiver: string;
}
export type TokensReservedEvent = TypedEvent<
  [number, BigNumber, string],
  TokensReservedEventObject
>;

export type TokensReservedEventFilter = TypedEventFilter<TokensReservedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnpausedSaleEventObject {
  _saleCategoryId: BigNumber;
}
export type UnpausedSaleEvent = TypedEvent<
  [BigNumber],
  UnpausedSaleEventObject
>;

export type UnpausedSaleEventFilter = TypedEventFilter<UnpausedSaleEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EMPTY_BYTES(overrides?: CallOverrides): Promise<[string]>;

    MAX_PHASES(overrides?: CallOverrides): Promise<[number]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSale(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _perWalletLimit: PromiseOrValue<BigNumberish>,
      _perTransactionLimit: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
      _phase: PromiseOrValue<BigNumberish>,
      _isDiscountEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkDiscountCodeValidity(
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _receiverAddress: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkIfTokenReservedForPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    editKeyCardRatioOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newKeyCardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editMerkleRootOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editPerLimitOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newPerWalletLimit: PromiseOrValue<BigNumberish>,
      _newPerTransactionLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editPriceOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editSaleTimeOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newStartTime: PromiseOrValue<BigNumberish>,
      _newEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editSupplyOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newTokensSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvatar(overrides?: CallOverrides): Promise<[string]>;

    getCurrentPhase(overrides?: CallOverrides): Promise<[number]>;

    getDiscountSigner(overrides?: CallOverrides): Promise<[string]>;

    getKeyCard(overrides?: CallOverrides): Promise<[string]>;

    getSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IController.SaleCategoryStructOutput]>;

    getSaleCategoryCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { counter: BigNumber }>;

    getTokensToReserveInPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _newAvatar: PromiseOrValue<string>,
      _newKeyCard: PromiseOrValue<string>,
      _newDiscountSigner: PromiseOrValue<string>,
      _payees: PromiseOrValue<string>[],
      _shares: PromiseOrValue<BigNumberish>[],
      _tokensToReserveInPhase: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintAllowlisted(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintDiscounted(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _saleId: PromiseOrValue<BigNumberish>,
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintDiscountedAllowlist(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _saleId: PromiseOrValue<BigNumberish>,
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintPublic(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payee(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "releasable(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "releasable(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "release(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "release(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "released(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "released(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveTokens(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      _newAvatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDiscountSigner(
      _newDiscountSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeyCard(
      _newKeyCard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewPhase(
      _newPhase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokensToReserveInPhase(
      _phaseId: PromiseOrValue<BigNumberish>[],
      _numberOfTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shares(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toggleDiscountOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _isDiscounted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    togglePauseSale(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensMintedByOwnerInSale(
      _saleId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalReleased(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalReleased()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EMPTY_BYTES(overrides?: CallOverrides): Promise<string>;

  MAX_PHASES(overrides?: CallOverrides): Promise<number>;

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSale(
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    _perWalletLimit: PromiseOrValue<BigNumberish>,
    _perTransactionLimit: PromiseOrValue<BigNumberish>,
    _supply: PromiseOrValue<BigNumberish>,
    _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
    _phase: PromiseOrValue<BigNumberish>,
    _isDiscountEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkDiscountCodeValidity(
    _discountIndex: PromiseOrValue<BigNumberish>,
    _discountedPrice: PromiseOrValue<BigNumberish>,
    _receiverAddress: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkIfTokenReservedForPhase(
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  editKeyCardRatioOfSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    _newKeyCardRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editMerkleRootOfSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    _newMerkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editPerLimitOfSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    _newPerWalletLimit: PromiseOrValue<BigNumberish>,
    _newPerTransactionLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editPriceOfSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editSaleTimeOfSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    _newStartTime: PromiseOrValue<BigNumberish>,
    _newEndTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editSupplyOfSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    _newTokensSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvatar(overrides?: CallOverrides): Promise<string>;

  getCurrentPhase(overrides?: CallOverrides): Promise<number>;

  getDiscountSigner(overrides?: CallOverrides): Promise<string>;

  getKeyCard(overrides?: CallOverrides): Promise<string>;

  getSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IController.SaleCategoryStructOutput>;

  getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getTokensToReserveInPhase(
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _newAvatar: PromiseOrValue<string>,
    _newKeyCard: PromiseOrValue<string>,
    _newDiscountSigner: PromiseOrValue<string>,
    _payees: PromiseOrValue<string>[],
    _shares: PromiseOrValue<BigNumberish>[],
    _tokensToReserveInPhase: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintAllowlisted(
    _receiver: PromiseOrValue<string>,
    _numberOfTokens: PromiseOrValue<BigNumberish>,
    _proofs: PromiseOrValue<BytesLike>[],
    _saleId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintDiscounted(
    _receiver: PromiseOrValue<string>,
    _numberOfTokens: PromiseOrValue<BigNumberish>,
    _saleId: PromiseOrValue<BigNumberish>,
    _discountIndex: PromiseOrValue<BigNumberish>,
    _discountedPrice: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintDiscountedAllowlist(
    _receiver: PromiseOrValue<string>,
    _numberOfTokens: PromiseOrValue<BigNumberish>,
    _proofs: PromiseOrValue<BytesLike>[],
    _saleId: PromiseOrValue<BigNumberish>,
    _discountIndex: PromiseOrValue<BigNumberish>,
    _discountedPrice: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintPublic(
    _receiver: PromiseOrValue<string>,
    _numberOfTokens: PromiseOrValue<BigNumberish>,
    _saleId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payee(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "releasable(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "releasable(address,address)"(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "release(address)"(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "release(address,address)"(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "released(address,address)"(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "released(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveTokens(
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    _newAvatar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDiscountSigner(
    _newDiscountSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeyCard(
    _newKeyCard: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewPhase(
    _newPhase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokensToReserveInPhase(
    _phaseId: PromiseOrValue<BigNumberish>[],
    _numberOfTokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shares(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toggleDiscountOfSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    _isDiscounted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  togglePauseSale(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    _isPaused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensMintedByOwnerInSale(
    _saleId: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalReleased(address)"(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EMPTY_BYTES(overrides?: CallOverrides): Promise<string>;

    MAX_PHASES(overrides?: CallOverrides): Promise<number>;

    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addSale(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _perWalletLimit: PromiseOrValue<BigNumberish>,
      _perTransactionLimit: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
      _phase: PromiseOrValue<BigNumberish>,
      _isDiscountEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkDiscountCodeValidity(
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _receiverAddress: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkIfTokenReservedForPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    editKeyCardRatioOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newKeyCardRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editMerkleRootOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    editPerLimitOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newPerWalletLimit: PromiseOrValue<BigNumberish>,
      _newPerTransactionLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editPriceOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editSaleTimeOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newStartTime: PromiseOrValue<BigNumberish>,
      _newEndTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editSupplyOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newTokensSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvatar(overrides?: CallOverrides): Promise<string>;

    getCurrentPhase(overrides?: CallOverrides): Promise<number>;

    getDiscountSigner(overrides?: CallOverrides): Promise<string>;

    getKeyCard(overrides?: CallOverrides): Promise<string>;

    getSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IController.SaleCategoryStructOutput>;

    getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensToReserveInPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _newAvatar: PromiseOrValue<string>,
      _newKeyCard: PromiseOrValue<string>,
      _newDiscountSigner: PromiseOrValue<string>,
      _payees: PromiseOrValue<string>[],
      _shares: PromiseOrValue<BigNumberish>[],
      _tokensToReserveInPhase: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintAllowlisted(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintDiscounted(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _saleId: PromiseOrValue<BigNumberish>,
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintDiscountedAllowlist(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _saleId: PromiseOrValue<BigNumberish>,
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPublic(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payee(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "releasable(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "releasable(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "release(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "release(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "released(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "released(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveTokens(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatar(
      _newAvatar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiscountSigner(
      _newDiscountSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeyCard(
      _newKeyCard: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewPhase(
      _newPhase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokensToReserveInPhase(
      _phaseId: PromiseOrValue<BigNumberish>[],
      _numberOfTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    shares(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleDiscountOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _isDiscounted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    togglePauseSale(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _isPaused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensMintedByOwnerInSale(
      _saleId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddedSaleCategory(uint256,uint8)"(
      _saleCategoryId?: null,
      _phase?: null
    ): AddedSaleCategoryEventFilter;
    AddedSaleCategory(
      _saleCategoryId?: null,
      _phase?: null
    ): AddedSaleCategoryEventFilter;

    "AvatarUpdated(address,address)"(
      _oldAvatar?: null,
      _newAvatar?: null
    ): AvatarUpdatedEventFilter;
    AvatarUpdated(
      _oldAvatar?: null,
      _newAvatar?: null
    ): AvatarUpdatedEventFilter;

    "DiscountCodeApplied(uint256)"(
      _discountCodeIndex?: null
    ): DiscountCodeAppliedEventFilter;
    DiscountCodeApplied(
      _discountCodeIndex?: null
    ): DiscountCodeAppliedEventFilter;

    "DiscountDisabledOnSaleCategory(uint256)"(
      _saleCategoryId?: null
    ): DiscountDisabledOnSaleCategoryEventFilter;
    DiscountDisabledOnSaleCategory(
      _saleCategoryId?: null
    ): DiscountDisabledOnSaleCategoryEventFilter;

    "DiscountEnabledOnSaleCategory(uint256)"(
      _saleCategoryId?: null
    ): DiscountEnabledOnSaleCategoryEventFilter;
    DiscountEnabledOnSaleCategory(
      _saleCategoryId?: null
    ): DiscountEnabledOnSaleCategoryEventFilter;

    "DiscountSignerUpdated(address)"(
      _newDiscountSigner?: null
    ): DiscountSignerUpdatedEventFilter;
    DiscountSignerUpdated(
      _newDiscountSigner?: null
    ): DiscountSignerUpdatedEventFilter;

    "ERC20PaymentReleased(address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null
    ): ERC20PaymentReleasedEventFilter;
    ERC20PaymentReleased(
      token?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null
    ): ERC20PaymentReleasedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KeyCardRatioUpdatedForSaleCategory(uint256,uint64)"(
      _saleCategoryId?: null,
      _newKeyCardRatio?: null
    ): KeyCardRatioUpdatedForSaleCategoryEventFilter;
    KeyCardRatioUpdatedForSaleCategory(
      _saleCategoryId?: null,
      _newKeyCardRatio?: null
    ): KeyCardRatioUpdatedForSaleCategoryEventFilter;

    "MemberKeyCardUpdated(address,address)"(
      _oldKeyCard?: null,
      _newKeyCard?: null
    ): MemberKeyCardUpdatedEventFilter;
    MemberKeyCardUpdated(
      _oldKeyCard?: null,
      _newKeyCard?: null
    ): MemberKeyCardUpdatedEventFilter;

    "MerkleRootUpdatedSaleCategory(uint256,bytes32)"(
      _saleCategoryId?: null,
      _newMerkleRoot?: null
    ): MerkleRootUpdatedSaleCategoryEventFilter;
    MerkleRootUpdatedSaleCategory(
      _saleCategoryId?: null,
      _newMerkleRoot?: null
    ): MerkleRootUpdatedSaleCategoryEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PausedSale(uint256)"(_saleCategoryId?: null): PausedSaleEventFilter;
    PausedSale(_saleCategoryId?: null): PausedSaleEventFilter;

    "PayeeAdded(address,uint256)"(
      account?: null,
      shares?: null
    ): PayeeAddedEventFilter;
    PayeeAdded(account?: null, shares?: null): PayeeAddedEventFilter;

    "PaymentReceived(address,uint256)"(
      from?: null,
      amount?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(from?: null, amount?: null): PaymentReceivedEventFilter;

    "PaymentReleased(address,uint256)"(
      to?: null,
      amount?: null
    ): PaymentReleasedEventFilter;
    PaymentReleased(to?: null, amount?: null): PaymentReleasedEventFilter;

    "PerLimitUpdatedOfSaleCategory(uint256,uint64,uint64)"(
      _saleCategoryId?: null,
      _newPerTransactionLimit?: null,
      _newPerWalletLimit?: null
    ): PerLimitUpdatedOfSaleCategoryEventFilter;
    PerLimitUpdatedOfSaleCategory(
      _saleCategoryId?: null,
      _newPerTransactionLimit?: null,
      _newPerWalletLimit?: null
    ): PerLimitUpdatedOfSaleCategoryEventFilter;

    "PhaseChanged(uint8)"(newPhaseId?: null): PhaseChangedEventFilter;
    PhaseChanged(newPhaseId?: null): PhaseChangedEventFilter;

    "PriceUpdatedForSaleCategory(uint256,uint256)"(
      _saleCategoryId?: null,
      _newPrice?: null
    ): PriceUpdatedForSaleCategoryEventFilter;
    PriceUpdatedForSaleCategory(
      _saleCategoryId?: null,
      _newPrice?: null
    ): PriceUpdatedForSaleCategoryEventFilter;

    "SupplyUpdatedForSaleCategory(uint256,uint64)"(
      _saleCategoryId?: null,
      _newSupplyForTheSale?: null
    ): SupplyUpdatedForSaleCategoryEventFilter;
    SupplyUpdatedForSaleCategory(
      _saleCategoryId?: null,
      _newSupplyForTheSale?: null
    ): SupplyUpdatedForSaleCategoryEventFilter;

    "TimeUpdatedForSaleCategory(uint256,uint96,uint96)"(
      _saleCategoryId?: null,
      _newStartTime?: null,
      _newEndTime?: null
    ): TimeUpdatedForSaleCategoryEventFilter;
    TimeUpdatedForSaleCategory(
      _saleCategoryId?: null,
      _newStartTime?: null,
      _newEndTime?: null
    ): TimeUpdatedForSaleCategoryEventFilter;

    "TokenToReserveUpdated(uint8,uint96)"(
      phaseId?: null,
      tokensToReserve?: null
    ): TokenToReserveUpdatedEventFilter;
    TokenToReserveUpdated(
      phaseId?: null,
      tokensToReserve?: null
    ): TokenToReserveUpdatedEventFilter;

    "TokensReserved(uint8,uint96,address)"(
      phaseId?: null,
      numberOfTokensReserved?: null,
      receiver?: null
    ): TokensReservedEventFilter;
    TokensReserved(
      phaseId?: null,
      numberOfTokensReserved?: null,
      receiver?: null
    ): TokensReservedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UnpausedSale(uint256)"(_saleCategoryId?: null): UnpausedSaleEventFilter;
    UnpausedSale(_saleCategoryId?: null): UnpausedSaleEventFilter;
  };

  estimateGas: {
    EMPTY_BYTES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PHASES(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSale(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _perWalletLimit: PromiseOrValue<BigNumberish>,
      _perTransactionLimit: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
      _phase: PromiseOrValue<BigNumberish>,
      _isDiscountEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkDiscountCodeValidity(
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _receiverAddress: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIfTokenReservedForPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editKeyCardRatioOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newKeyCardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editMerkleRootOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editPerLimitOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newPerWalletLimit: PromiseOrValue<BigNumberish>,
      _newPerTransactionLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editPriceOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editSaleTimeOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newStartTime: PromiseOrValue<BigNumberish>,
      _newEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editSupplyOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newTokensSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvatar(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    getDiscountSigner(overrides?: CallOverrides): Promise<BigNumber>;

    getKeyCard(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensToReserveInPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _newAvatar: PromiseOrValue<string>,
      _newKeyCard: PromiseOrValue<string>,
      _newDiscountSigner: PromiseOrValue<string>,
      _payees: PromiseOrValue<string>[],
      _shares: PromiseOrValue<BigNumberish>[],
      _tokensToReserveInPhase: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintAllowlisted(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintDiscounted(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _saleId: PromiseOrValue<BigNumberish>,
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintDiscountedAllowlist(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _saleId: PromiseOrValue<BigNumberish>,
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintPublic(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payee(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "releasable(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "releasable(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "release(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "release(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "released(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "released(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveTokens(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvatar(
      _newAvatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDiscountSigner(
      _newDiscountSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeyCard(
      _newKeyCard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewPhase(
      _newPhase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokensToReserveInPhase(
      _phaseId: PromiseOrValue<BigNumberish>[],
      _numberOfTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shares(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleDiscountOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _isDiscounted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    togglePauseSale(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensMintedByOwnerInSale(
      _saleId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EMPTY_BYTES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PHASES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSale(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _perWalletLimit: PromiseOrValue<BigNumberish>,
      _perTransactionLimit: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
      _phase: PromiseOrValue<BigNumberish>,
      _isDiscountEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkDiscountCodeValidity(
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _receiverAddress: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIfTokenReservedForPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editKeyCardRatioOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newKeyCardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editMerkleRootOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editPerLimitOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newPerWalletLimit: PromiseOrValue<BigNumberish>,
      _newPerTransactionLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editPriceOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editSaleTimeOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newStartTime: PromiseOrValue<BigNumberish>,
      _newEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editSupplyOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _newTokensSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDiscountSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeyCard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleCategoryCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensToReserveInPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _newAvatar: PromiseOrValue<string>,
      _newKeyCard: PromiseOrValue<string>,
      _newDiscountSigner: PromiseOrValue<string>,
      _payees: PromiseOrValue<string>[],
      _shares: PromiseOrValue<BigNumberish>[],
      _tokensToReserveInPhase: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintAllowlisted(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintDiscounted(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _saleId: PromiseOrValue<BigNumberish>,
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintDiscountedAllowlist(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _saleId: PromiseOrValue<BigNumberish>,
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintPublic(
      _receiver: PromiseOrValue<string>,
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payee(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "releasable(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "releasable(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "release(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "release(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "released(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "released(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveTokens(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      _newAvatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDiscountSigner(
      _newDiscountSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeyCard(
      _newKeyCard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewPhase(
      _newPhase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokensToReserveInPhase(
      _phaseId: PromiseOrValue<BigNumberish>[],
      _numberOfTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shares(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleDiscountOfSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _isDiscounted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    togglePauseSale(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      _isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensMintedByOwnerInSale(
      _saleId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalReleased(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalReleased()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
