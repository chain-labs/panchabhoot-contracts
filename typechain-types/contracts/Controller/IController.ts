/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IController {
  export type SaleCategoryStruct = {
    saleId: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    perWalletLimit: PromiseOrValue<BigNumberish>;
    perTransactionLimit: PromiseOrValue<BigNumberish>;
    numberOfTokensInThisSale: PromiseOrValue<BigNumberish>;
    totalTokensSoldInThisSale: PromiseOrValue<BigNumberish>;
    keyCardPerAvatar: PromiseOrValue<BigNumberish>;
    phase: PromiseOrValue<BigNumberish>;
    paused: PromiseOrValue<boolean>;
    isDiscountEnabled: PromiseOrValue<boolean>;
  };

  export type SaleCategoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean,
    boolean
  ] & {
    saleId: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    price: BigNumber;
    merkleRoot: string;
    perWalletLimit: BigNumber;
    perTransactionLimit: BigNumber;
    numberOfTokensInThisSale: BigNumber;
    totalTokensSoldInThisSale: BigNumber;
    keyCardPerAvatar: BigNumber;
    phase: number;
    paused: boolean;
    isDiscountEnabled: boolean;
  };
}

export interface IControllerInterface extends utils.Interface {
  functions: {
    "addSale()": FunctionFragment;
    "editSale()": FunctionFragment;
    "getAvatar()": FunctionFragment;
    "getDiscountSigner()": FunctionFragment;
    "getIntervalToReserve()": FunctionFragment;
    "getMemberKeyCard()": FunctionFragment;
    "getNAME()": FunctionFragment;
    "getSaleCategoryCounter()": FunctionFragment;
    "getSales(uint64)": FunctionFragment;
    "getTokenMintedByAccountInPhase(uint8)": FunctionFragment;
    "getTokensToReserve()": FunctionFragment;
    "getVERSION()": FunctionFragment;
    "mintAvatar(address,uint256)": FunctionFragment;
    "mintAvatarAtDiscount(address,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "mintAvatarWithAllowlist(address,uint256,bytes32[])": FunctionFragment;
    "pause()": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setDiscountSigner(address)": FunctionFragment;
    "setIntervalToReserve(uint256)": FunctionFragment;
    "setKeyCard(address)": FunctionFragment;
    "setTokensToReserve(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSale"
      | "editSale"
      | "getAvatar"
      | "getDiscountSigner"
      | "getIntervalToReserve"
      | "getMemberKeyCard"
      | "getNAME"
      | "getSaleCategoryCounter"
      | "getSales"
      | "getTokenMintedByAccountInPhase"
      | "getTokensToReserve"
      | "getVERSION"
      | "mintAvatar"
      | "mintAvatarAtDiscount"
      | "mintAvatarWithAllowlist"
      | "pause"
      | "setAvatar"
      | "setDiscountSigner"
      | "setIntervalToReserve"
      | "setKeyCard"
      | "setTokensToReserve"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addSale", values?: undefined): string;
  encodeFunctionData(functionFragment: "editSale", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAvatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDiscountSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIntervalToReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberKeyCard",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSaleCategoryCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSales",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMintedByAccountInPhase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensToReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAvatar",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAvatarAtDiscount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAvatarWithAllowlist",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntervalToReserve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeyCard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokensToReserve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDiscountSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntervalToReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberKeyCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSaleCategoryCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMintedByAccountInPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensToReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAvatarAtDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAvatarWithAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntervalToReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeyCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokensToReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {};
}

export interface IController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvatar(overrides?: CallOverrides): Promise<[string]>;

    getDiscountSigner(overrides?: CallOverrides): Promise<[string]>;

    getIntervalToReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMemberKeyCard(overrides?: CallOverrides): Promise<[string]>;

    getNAME(overrides?: CallOverrides): Promise<[string]>;

    getSaleCategoryCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSales(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IController.SaleCategoryStructOutput]>;

    getTokenMintedByAccountInPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokensToReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVERSION(overrides?: CallOverrides): Promise<[string]>;

    mintAvatar(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintAvatarAtDiscount(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _validUntil: PromiseOrValue<BigNumberish>,
      _discountCodeHash: PromiseOrValue<BigNumberish>,
      _discountSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintAvatarWithAllowlist(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDiscountSigner(
      _newDiscountSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIntervalToReserve(
      _newIntervalToReserve: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeyCard(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokensToReserve(
      _newTokensToReserve: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvatar(overrides?: CallOverrides): Promise<string>;

  getDiscountSigner(overrides?: CallOverrides): Promise<string>;

  getIntervalToReserve(overrides?: CallOverrides): Promise<BigNumber>;

  getMemberKeyCard(overrides?: CallOverrides): Promise<string>;

  getNAME(overrides?: CallOverrides): Promise<string>;

  getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getSales(
    _saleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IController.SaleCategoryStructOutput>;

  getTokenMintedByAccountInPhase(
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensToReserve(overrides?: CallOverrides): Promise<BigNumber>;

  getVERSION(overrides?: CallOverrides): Promise<string>;

  mintAvatar(
    _receiver: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintAvatarAtDiscount(
    _receiver: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    _discountedPrice: PromiseOrValue<BigNumberish>,
    _validUntil: PromiseOrValue<BigNumberish>,
    _discountCodeHash: PromiseOrValue<BigNumberish>,
    _discountSignature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintAvatarWithAllowlist(
    _receiver: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    _proofs: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDiscountSigner(
    _newDiscountSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIntervalToReserve(
    _newIntervalToReserve: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeyCard(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokensToReserve(
    _newTokensToReserve: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSale(overrides?: CallOverrides): Promise<void>;

    editSale(overrides?: CallOverrides): Promise<void>;

    getAvatar(overrides?: CallOverrides): Promise<string>;

    getDiscountSigner(overrides?: CallOverrides): Promise<string>;

    getIntervalToReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberKeyCard(overrides?: CallOverrides): Promise<string>;

    getNAME(overrides?: CallOverrides): Promise<string>;

    getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getSales(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IController.SaleCategoryStructOutput>;

    getTokenMintedByAccountInPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensToReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getVERSION(overrides?: CallOverrides): Promise<string>;

    mintAvatar(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAvatarAtDiscount(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _validUntil: PromiseOrValue<BigNumberish>,
      _discountCodeHash: PromiseOrValue<BigNumberish>,
      _discountSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAvatarWithAllowlist(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    setAvatar(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiscountSigner(
      _newDiscountSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIntervalToReserve(
      _newIntervalToReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeyCard(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokensToReserve(
      _newTokensToReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvatar(overrides?: CallOverrides): Promise<BigNumber>;

    getDiscountSigner(overrides?: CallOverrides): Promise<BigNumber>;

    getIntervalToReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberKeyCard(overrides?: CallOverrides): Promise<BigNumber>;

    getNAME(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getSales(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenMintedByAccountInPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensToReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getVERSION(overrides?: CallOverrides): Promise<BigNumber>;

    mintAvatar(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintAvatarAtDiscount(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _validUntil: PromiseOrValue<BigNumberish>,
      _discountCodeHash: PromiseOrValue<BigNumberish>,
      _discountSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintAvatarWithAllowlist(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvatar(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDiscountSigner(
      _newDiscountSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIntervalToReserve(
      _newIntervalToReserve: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeyCard(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokensToReserve(
      _newTokensToReserve: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDiscountSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIntervalToReserve(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberKeyCard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleCategoryCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSales(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenMintedByAccountInPhase(
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensToReserve(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAvatar(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintAvatarAtDiscount(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _validUntil: PromiseOrValue<BigNumberish>,
      _discountCodeHash: PromiseOrValue<BigNumberish>,
      _discountSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintAvatarWithAllowlist(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDiscountSigner(
      _newDiscountSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIntervalToReserve(
      _newIntervalToReserve: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeyCard(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokensToReserve(
      _newTokensToReserve: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
