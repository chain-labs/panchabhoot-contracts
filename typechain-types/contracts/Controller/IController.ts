/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IController {
  export type SaleCategoryStruct = {
    price: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    perWalletLimit: PromiseOrValue<BigNumberish>;
    perTransactionLimit: PromiseOrValue<BigNumberish>;
    supply: PromiseOrValue<BigNumberish>;
    tokensMinted: PromiseOrValue<BigNumberish>;
    keyCardPerAvatar: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    phase: PromiseOrValue<BigNumberish>;
    paused: PromiseOrValue<boolean>;
    isDiscountEnabled: PromiseOrValue<boolean>;
  };

  export type SaleCategoryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean,
    boolean
  ] & {
    price: BigNumber;
    merkleRoot: string;
    perWalletLimit: BigNumber;
    perTransactionLimit: BigNumber;
    supply: BigNumber;
    tokensMinted: BigNumber;
    keyCardPerAvatar: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    phase: number;
    paused: boolean;
    isDiscountEnabled: boolean;
  };
}

export interface IControllerInterface extends utils.Interface {
  functions: {
    "addSale(uint96,uint96,uint256,bytes32,uint64,uint64,uint64,uint64,uint8,bool)": FunctionFragment;
    "checkDiscountCodeValidity(uint256,uint256,address,bytes)": FunctionFragment;
    "getAvatar()": FunctionFragment;
    "getKeyCard()": FunctionFragment;
    "getSaleCategory(uint256)": FunctionFragment;
    "getSaleCategoryCounter()": FunctionFragment;
    "pause()": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setKeyCard(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSale"
      | "checkDiscountCodeValidity"
      | "getAvatar"
      | "getKeyCard"
      | "getSaleCategory"
      | "getSaleCategoryCounter"
      | "pause"
      | "setAvatar"
      | "setKeyCard"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSale",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDiscountCodeValidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getAvatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getKeyCard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleCategory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleCategoryCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeyCard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkDiscountCodeValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKeyCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSaleCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleCategoryCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKeyCard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {};
}

export interface IController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSale(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _perWalletLimit: PromiseOrValue<BigNumberish>,
      _perTransactionLimit: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
      _phase: PromiseOrValue<BigNumberish>,
      _isDiscountEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkDiscountCodeValidity(
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _receiverAddress: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAvatar(overrides?: CallOverrides): Promise<[string]>;

    getKeyCard(overrides?: CallOverrides): Promise<[string]>;

    getSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IController.SaleCategoryStructOutput]>;

    getSaleCategoryCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeyCard(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addSale(
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    _perWalletLimit: PromiseOrValue<BigNumberish>,
    _perTransactionLimit: PromiseOrValue<BigNumberish>,
    _supply: PromiseOrValue<BigNumberish>,
    _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
    _phase: PromiseOrValue<BigNumberish>,
    _isDiscountEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkDiscountCodeValidity(
    _discountIndex: PromiseOrValue<BigNumberish>,
    _discountedPrice: PromiseOrValue<BigNumberish>,
    _receiverAddress: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAvatar(overrides?: CallOverrides): Promise<string>;

  getKeyCard(overrides?: CallOverrides): Promise<string>;

  getSaleCategory(
    _saleCategoryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IController.SaleCategoryStructOutput>;

  getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeyCard(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSale(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _perWalletLimit: PromiseOrValue<BigNumberish>,
      _perTransactionLimit: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
      _phase: PromiseOrValue<BigNumberish>,
      _isDiscountEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkDiscountCodeValidity(
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _receiverAddress: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAvatar(overrides?: CallOverrides): Promise<string>;

    getKeyCard(overrides?: CallOverrides): Promise<string>;

    getSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IController.SaleCategoryStructOutput>;

    getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    setAvatar(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeyCard(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addSale(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _perWalletLimit: PromiseOrValue<BigNumberish>,
      _perTransactionLimit: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
      _phase: PromiseOrValue<BigNumberish>,
      _isDiscountEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkDiscountCodeValidity(
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _receiverAddress: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvatar(overrides?: CallOverrides): Promise<BigNumber>;

    getKeyCard(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleCategoryCounter(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvatar(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeyCard(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSale(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _perWalletLimit: PromiseOrValue<BigNumberish>,
      _perTransactionLimit: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _keyCardPerAvatar: PromiseOrValue<BigNumberish>,
      _phase: PromiseOrValue<BigNumberish>,
      _isDiscountEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkDiscountCodeValidity(
      _discountIndex: PromiseOrValue<BigNumberish>,
      _discountedPrice: PromiseOrValue<BigNumberish>,
      _receiverAddress: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeyCard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleCategory(
      _saleCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleCategoryCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeyCard(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
